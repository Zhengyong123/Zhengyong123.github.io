<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>剑出花残</title>
  <subtitle>come on</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-08T09:06:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>郑勇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些有用CSS代码片段(二)</title>
    <link href="http://yoursite.com/2016/11/17/cssPart2/"/>
    <id>http://yoursite.com/2016/11/17/cssPart2/</id>
    <published>2016-11-17T08:45:22.000Z</published>
    <updated>2016-12-08T09:06:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS3-斑马线"><a href="#CSS3-斑马线" class="headerlink" title="CSS3 斑马线"></a>CSS3 斑马线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tbody tr:nth-child(odd) &#123;</div><div class="line">    background-color: #ccc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="大字段落"><a href="#大字段落" class="headerlink" title="大字段落"></a>大字段落</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">p:first-letter&#123;</div><div class="line">    display: block;</div><div class="line">    margin: 5px 0 0 5px;</div><div class="line">    float: left;</div><div class="line">    color: #ff3366;</div><div class="line">    font-size: 5.4em;</div><div class="line">    font-family: Georgia, Times New Roman, serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="内部CSS3-盒阴影"><a href="#内部CSS3-盒阴影" class="headerlink" title="内部CSS3 盒阴影"></a>内部CSS3 盒阴影</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#mydiv &#123; </div><div class="line">    -moz-box-shadow: inset 2px 0 4px #000;</div><div class="line">    -webkit-box-shadow: inset 2px 0 4px #000;</div><div class="line">    box-shadow: inset 2px 0 4px #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="外部CSS3-盒阴影"><a href="#外部CSS3-盒阴影" class="headerlink" title="外部CSS3 盒阴影"></a>外部CSS3 盒阴影</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#mydiv &#123; </div><div class="line">    -webkit-box-shadow: 0 2px 2px -2px rgba(0, 0, 0, 0.52);</div><div class="line">    -moz-box-shadow: 0 2px 2px -2px rgba(0, 0, 0, 0.52);</div><div class="line">    box-shadow: 0 2px 2px -2px rgba(0, 0, 0, 0.52);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="三角形列表项目符号"><a href="#三角形列表项目符号" class="headerlink" title="三角形列表项目符号"></a>三角形列表项目符号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">ul &#123;</div><div class="line">    margin: 0.75em 0;</div><div class="line">    padding: 0 1em;</div><div class="line">    list-style: none;</div><div class="line">&#125;</div><div class="line">li:before &#123; </div><div class="line">    content: &quot;&quot;;</div><div class="line">    border-color: transparent #111;</div><div class="line">    border-style: solid;</div><div class="line">    border-width: 0.35em 0 0.35em 0.45em;</div><div class="line">    display: block;</div><div class="line">    height: 0;</div><div class="line">    width: 0;</div><div class="line">    left: -1em;</div><div class="line">    top: 0.9em;</div><div class="line">    position: relative;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CSS3-列文本"><a href="#CSS3-列文本" class="headerlink" title="CSS3 列文本"></a>CSS3 列文本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#columns-3 &#123;</div><div class="line">    text-align: justify;</div><div class="line">    -moz-column-count: 3;</div><div class="line">    -moz-column-gap: 12px;</div><div class="line">    -moz-column-rule: 1px solid #c4c8cc;</div><div class="line">    -webkit-column-count: 3;</div><div class="line">    -webkit-column-gap: 12px;</div><div class="line">    -webkit-column-rule: 1px solid #c4c8cc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CSS固定页脚"><a href="#CSS固定页脚" class="headerlink" title="CSS固定页脚"></a>CSS固定页脚</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#footer &#123;</div><div class="line">    position: fixed;</div><div class="line">    left: 0px;</div><div class="line">    bottom: 0px;</div><div class="line">    height: 30px;</div><div class="line">    width: 100%;</div><div class="line">    background: #444;</div><div class="line">&#125;</div><div class="line">/* IE 6 */</div><div class="line">* html #footer &#123;</div><div class="line">    position: absolute;</div><div class="line">    top: expression((0-(footer.offsetHeight)+(document.documentElement.clientHeight ? document.documentElement.clientHeight : document.body.clientHeight)+(ignoreMe = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop))+&apos;px&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="IE6的PNG透明修复"><a href="#IE6的PNG透明修复" class="headerlink" title="IE6的PNG透明修复"></a>IE6的PNG透明修复</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.bg &#123;</div><div class="line">    width:200px;</div><div class="line">    height:100px;</div><div class="line">    background: url(/folder/yourimage.png) no-repeat;</div><div class="line">    _background:none;</div><div class="line">    _filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src=&apos;/folder/yourimage.png&apos;,sizingMethod=&apos;crop&apos;);</div><div class="line">&#125;</div><div class="line">/* 1px gif method */</div><div class="line">img, .png &#123;</div><div class="line">    position: relative;</div><div class="line">    behavior: expression((this.runtimeStyle.behavior=&quot;none&quot;)&amp;&amp;(this.pngSet?this.pngSet=true:(this.nodeName == &quot;IMG&quot; &amp;&amp; this.src.toLowerCase().indexOf(&apos;.png&apos;)&gt;-1?(this.runtimeStyle.backgroundImage = &quot;none&quot;,</div><div class="line">       this.runtimeStyle.filter = &quot;progid:DXImageTransform.Microsoft.AlphaImageLoader(src=&apos;&quot; + this.src + &quot;&apos;, sizingMethod=&apos;image&apos;)&quot;,</div><div class="line">       this.src = &quot;images/transparent.gif&quot;):(this.origBg = this.origBg? this.origBg :this.currentStyle.backgroundImage.toString().replace(&apos;url(&quot;&apos;,&apos;&apos;).replace(&apos;&quot;)&apos;,&apos;&apos;),</div><div class="line">       this.runtimeStyle.filter = &quot;progid:DXImageTransform.Microsoft.AlphaImageLoader(src=&apos;&quot; + this.origBg + &quot;&apos;, sizingMethod=&apos;crop&apos;)&quot;,</div><div class="line">       this.runtimeStyle.backgroundImage = &quot;none&quot;)),this.pngSet=true));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CSS3-鲜艳的输入"><a href="#CSS3-鲜艳的输入" class="headerlink" title="CSS3 鲜艳的输入"></a>CSS3 鲜艳的输入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">input[type=text], textarea &#123;</div><div class="line">    -webkit-transition: all 0.30s ease-in-out;</div><div class="line">    -moz-transition: all 0.30s ease-in-out;</div><div class="line">    -ms-transition: all 0.30s ease-in-out;</div><div class="line">    -o-transition: all 0.30s ease-in-out;</div><div class="line">    outline: none;</div><div class="line">    padding: 3px 0px 3px 3px;</div><div class="line">    margin: 5px 1px 3px 0px;</div><div class="line">    border: 1px solid #ddd;</div><div class="line">&#125;</div><div class="line">input[type=text]:focus, textarea:focus &#123;</div><div class="line">    box-shadow: 0 0 5px rgba(81, 203, 238, 1);</div><div class="line">    padding: 3px 0px 3px 3px;</div><div class="line">    margin: 5px 1px 3px 0px;</div><div class="line">    border: 1px solid rgba(81, 203, 238, 1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="基于文件类型的链接样式"><a href="#基于文件类型的链接样式" class="headerlink" title="基于文件类型的链接样式"></a>基于文件类型的链接样式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/* external links */</div><div class="line">a[href^=&quot;http://&quot;] &#123;</div><div class="line">    padding-right: 13px;</div><div class="line">    background: url(&apos;external.gif&apos;) no-repeat center right;</div><div class="line">&#125;</div><div class="line">/* emails */</div><div class="line">a[href^=&quot;mailto:&quot;] &#123;</div><div class="line">    padding-right: 20px;</div><div class="line">    background: url(&apos;email.png&apos;) no-repeat center right;</div><div class="line">&#125;</div><div class="line">/* pdfs */</div><div class="line">a[href$=&quot;.pdf&quot;] &#123;</div><div class="line">    padding-right: 18px;</div><div class="line">    background: url(&apos;acrobat.png&apos;) no-repeat center right;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="强制换行"><a href="#强制换行" class="headerlink" title="强制换行"></a>强制换行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pre &#123;</div><div class="line">    white-space: pre-wrap;       /* css-3 */</div><div class="line">    white-space: -moz-pre-wrap;  /* Mozilla, since 1999 */</div><div class="line">    white-space: -pre-wrap;      /* Opera 4-6 */</div><div class="line">    white-space: -o-pre-wrap;    /* Opera 7 */</div><div class="line">    word-wrap: break-word;       /* Internet Explorer 5.5+ */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="网页顶部盒阴影"><a href="#网页顶部盒阴影" class="headerlink" title="网页顶部盒阴影"></a>网页顶部盒阴影</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">body:before &#123;</div><div class="line">    content: &quot;&quot;;</div><div class="line">    position: fixed;</div><div class="line">    top: -10px;</div><div class="line">    left: 0;</div><div class="line">    width: 100%;</div><div class="line">    height: 10px;</div><div class="line"></div><div class="line">    -webkit-box-shadow: 0px 0px 10px rgba(0,0,0,.8);</div><div class="line">    -moz-box-shadow: 0px 0px 10px rgba(0,0,0,.8);</div><div class="line">    box-shadow: 0px 0px 10px rgba(0,0,0,.8);</div><div class="line">    z-index: 100;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CSS3对话气泡"><a href="#CSS3对话气泡" class="headerlink" title="CSS3对话气泡"></a>CSS3对话气泡</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">.chat-bubble &#123;</div><div class="line">    background-color: #ededed;</div><div class="line">    border: 2px solid #666;</div><div class="line">    font-size: 35px;</div><div class="line">    line-height: 1.3em;</div><div class="line">    margin: 10px auto;</div><div class="line">    padding: 10px;</div><div class="line">    position: relative;</div><div class="line">    text-align: center;</div><div class="line">    width: 300px;</div><div class="line">    -moz-border-radius: 20px;</div><div class="line">    -webkit-border-radius: 20px;</div><div class="line">    -moz-box-shadow: 0 0 5px #888;</div><div class="line">    -webkit-box-shadow: 0 0 5px #888;</div><div class="line">    font-family: &apos;Bangers&apos;, arial, serif; </div><div class="line">&#125;</div><div class="line">.chat-bubble-arrow-border &#123;</div><div class="line">    border-color: #666 transparent transparent transparent;</div><div class="line">    border-style: solid;</div><div class="line">    border-width: 20px;</div><div class="line">    height: 0;</div><div class="line">    width: 0;</div><div class="line">    position: absolute;</div><div class="line">    bottom: -42px;</div><div class="line">    left: 30px;</div><div class="line">&#125;</div><div class="line">.chat-bubble-arrow &#123;</div><div class="line">    border-color: #ededed transparent transparent transparent;</div><div class="line">    border-style: solid;</div><div class="line">    border-width: 20px;</div><div class="line">    height: 0;</div><div class="line">    width: 0;</div><div class="line">    position: absolute;</div><div class="line">    bottom: -39px;</div><div class="line">    left: 30px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="H1-H5默认样式"><a href="#H1-H5默认样式" class="headerlink" title="H1-H5默认样式"></a>H1-H5默认样式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">h1,h2,h3,h4,h5&#123;</div><div class="line">    color: #005a9c;</div><div class="line">&#125;</div><div class="line">h1&#123;</div><div class="line">    font-size: 2.6em;</div><div class="line">    line-height: 2.45em;</div><div class="line">&#125;</div><div class="line">h2&#123;</div><div class="line">    font-size: 2.1em;</div><div class="line">    line-height: 1.9em;</div><div class="line">&#125;</div><div class="line">h3&#123;</div><div class="line">    font-size: 1.8em;</div><div class="line">    line-height: 1.65em;</div><div class="line">&#125;</div><div class="line">h4&#123;</div><div class="line">    font-size: 1.65em;</div><div class="line">    line-height: 1.4em;</div><div class="line">&#125;</div><div class="line">h5&#123;</div><div class="line">    font-size: 1.4em;</div><div class="line">    line-height: 1.25em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CSS悬浮提示文本"><a href="#CSS悬浮提示文本" class="headerlink" title="CSS悬浮提示文本"></a>CSS悬浮提示文本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">a &#123; </div><div class="line">    border-bottom:1px solid #bbb;</div><div class="line">    color:#666;</div><div class="line">    display:inline-block;</div><div class="line">    position:relative;</div><div class="line">    text-decoration:none;</div><div class="line">&#125;</div><div class="line">a:hover,</div><div class="line">a:focus &#123;</div><div class="line">    color:#36c;</div><div class="line">&#125;</div><div class="line">a:active &#123;</div><div class="line">    top:1px; </div><div class="line">&#125;</div><div class="line">/* Tooltip styling */</div><div class="line">a[data-tooltip]:after &#123;</div><div class="line">    border-top: 8px solid #222;</div><div class="line">    border-top: 8px solid hsla(0,0%,0%,.85);</div><div class="line">    border-left: 8px solid transparent;</div><div class="line">    border-right: 8px solid transparent;</div><div class="line">    content: &quot;&quot;;</div><div class="line">    display: none;</div><div class="line">    height: 0;</div><div class="line">    width: 0;</div><div class="line">    left: 25%;</div><div class="line">    position: absolute;</div><div class="line">&#125;</div><div class="line">a[data-tooltip]:before &#123;</div><div class="line">    background: #222;</div><div class="line">    background: hsla(0,0%,0%,.85);</div><div class="line">    color: #f6f6f6;</div><div class="line">    content: attr(data-tooltip);</div><div class="line">    display: none;</div><div class="line">    font-family: sans-serif;</div><div class="line">    font-size: 14px;</div><div class="line">    height: 32px;</div><div class="line">    left: 0;</div><div class="line">    line-height: 32px;</div><div class="line">    padding: 0 15px;</div><div class="line">    position: absolute;</div><div class="line">    text-shadow: 0 1px 1px hsla(0,0%,0%,1);</div><div class="line">    white-space: nowrap;</div><div class="line">    -webkit-border-radius: 5px;</div><div class="line">    -moz-border-radius: 5px;</div><div class="line">    -o-border-radius: 5px;</div><div class="line">    border-radius: 5px;</div><div class="line">&#125;</div><div class="line">a[data-tooltip]:hover:after &#123;</div><div class="line">    display: block;</div><div class="line">    top: -9px;</div><div class="line">&#125;</div><div class="line">a[data-tooltip]:hover:before &#123;</div><div class="line">    display: block;</div><div class="line">    top: -41px;</div><div class="line">&#125;</div><div class="line">a[data-tooltip]:active:after &#123;</div><div class="line">    top: -10px;</div><div class="line">&#125;</div><div class="line">a[data-tooltip]:active:before &#123;</div><div class="line">    top: -42px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="深灰色的圆形按钮"><a href="#深灰色的圆形按钮" class="headerlink" title="深灰色的圆形按钮"></a>深灰色的圆形按钮</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">.graybtn &#123;</div><div class="line">    -moz-box-shadow:inset 0px 1px 0px 0px #ffffff;</div><div class="line">    -webkit-box-shadow:inset 0px 1px 0px 0px #ffffff;</div><div class="line">    box-shadow:inset 0px 1px 0px 0px #ffffff;</div><div class="line">    background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #ffffff), color-stop(1, #d1d1d1) );</div><div class="line">    background:-moz-linear-gradient( center top, #ffffff 5%, #d1d1d1 100% );</div><div class="line">    filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=&apos;#ffffff&apos;, endColorstr=&apos;#d1d1d1&apos;);</div><div class="line">    background-color:#ffffff;</div><div class="line">    -moz-border-radius:6px;</div><div class="line">    -webkit-border-radius:6px;</div><div class="line">    border-radius:6px;</div><div class="line">    border:1px solid #dcdcdc;</div><div class="line">    display:inline-block;</div><div class="line">    color:#777777;</div><div class="line">    font-family:arial;</div><div class="line">    font-size:15px;</div><div class="line">    font-weight:bold;</div><div class="line">    padding:6px 24px;</div><div class="line">    text-decoration:none;</div><div class="line">    text-shadow:1px 1px 0px #ffffff;</div><div class="line">&#125;</div><div class="line">.graybtn:hover &#123;</div><div class="line">    background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #d1d1d1), color-stop(1, #ffffff) );</div><div class="line">    background:-moz-linear-gradient( center top, #d1d1d1 5%, #ffffff 100% );</div><div class="line">    filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=&apos;#d1d1d1&apos;, endColorstr=&apos;#ffffff&apos;);</div><div class="line">    background-color:#d1d1d1;</div><div class="line">&#125;</div><div class="line">.graybtn:active &#123;</div><div class="line">    position:relative;</div><div class="line">    top:1px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CSS3-方格图案"><a href="#CSS3-方格图案" class="headerlink" title="CSS3 方格图案"></a>CSS3 方格图案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">    background: radial-gradient(circle, white 10%, transparent 10%),</div><div class="line">    radial-gradient(circle, white 10%, black 10%) 50px 50px;</div><div class="line">    background-size: 100px 100px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CSS-font属性缩写"><a href="#CSS-font属性缩写" class="headerlink" title="CSS font属性缩写"></a>CSS font属性缩写</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  font: italic small-caps bold 1.2em/1.0em Arial, Tahoma, Helvetica;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="论文页面的卷曲效果"><a href="#论文页面的卷曲效果" class="headerlink" title="论文页面的卷曲效果"></a>论文页面的卷曲效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">ul.box &#123;</div><div class="line">    position: relative;</div><div class="line">    z-index: 1; /* prevent shadows falling behind containers with backgrounds */</div><div class="line">    overflow: hidden;</div><div class="line">    list-style: none;</div><div class="line">    margin: 0;</div><div class="line">    padding: 0; </div><div class="line">&#125;</div><div class="line"></div><div class="line">ul.box li &#123;</div><div class="line">    position: relative;</div><div class="line">    float: left;</div><div class="line">    width: 250px;</div><div class="line">    height: 150px;</div><div class="line">    padding: 0;</div><div class="line">    border: 1px solid #efefef;</div><div class="line">    margin: 0 30px 30px 0;</div><div class="line">    background: #fff;</div><div class="line">    -webkit-box-shadow: 0 1px 4px rgba(0, 0, 0, 0.27), 0 0 40px rgba(0, 0, 0, 0.06) inset;</div><div class="line">    -moz-box-shadow: 0 1px 4px rgba(0, 0, 0, 0.27), 0 0 40px rgba(0, 0, 0, 0.06) inset; </div><div class="line">    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.27), 0 0 40px rgba(0, 0, 0, 0.06) inset; </div><div class="line">&#125;</div><div class="line"></div><div class="line">ul.box li:before,</div><div class="line">ul.box li:after &#123;</div><div class="line">    content: &apos;&apos;;</div><div class="line">    z-index: -1;</div><div class="line">    position: absolute;</div><div class="line">    left: 10px;</div><div class="line">    bottom: 10px;</div><div class="line">    width: 70%;</div><div class="line">    max-width: 300px; /* avoid rotation causing ugly appearance at large container widths */</div><div class="line">    max-height: 100px;</div><div class="line">    height: 55%;</div><div class="line">    -webkit-box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);</div><div class="line">    -moz-box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);</div><div class="line">    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);</div><div class="line">    -webkit-transform: skew(-15deg) rotate(-6deg);</div><div class="line">    -moz-transform: skew(-15deg) rotate(-6deg);</div><div class="line">    -ms-transform: skew(-15deg) rotate(-6deg);</div><div class="line">    -o-transform: skew(-15deg) rotate(-6deg);</div><div class="line">    transform: skew(-15deg) rotate(-6deg); </div><div class="line">&#125;</div><div class="line"></div><div class="line">ul.box li:after &#123;</div><div class="line">    left: auto;</div><div class="line">    right: 10px;</div><div class="line">    -webkit-transform: skew(15deg) rotate(6deg);</div><div class="line">    -moz-transform: skew(15deg) rotate(6deg);</div><div class="line">    -ms-transform: skew(15deg) rotate(6deg);</div><div class="line">    -o-transform: skew(15deg) rotate(6deg);</div><div class="line">    transform: skew(15deg) rotate(6deg); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="鲜艳的锚链接"><a href="#鲜艳的锚链接" class="headerlink" title="鲜艳的锚链接"></a>鲜艳的锚链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">a &#123;</div><div class="line">    color: #00e;</div><div class="line">&#125;</div><div class="line">a:visited &#123;</div><div class="line">    color: #551a8b;</div><div class="line">&#125;</div><div class="line">a:hover &#123;</div><div class="line">    color: #06e;</div><div class="line">&#125;</div><div class="line">a:focus &#123;</div><div class="line">    outline: thin dotted;</div><div class="line">&#125;</div><div class="line">a:hover, a:active &#123;</div><div class="line">    outline: 0;</div><div class="line">&#125;</div><div class="line">a, a:visited, a:active &#123;</div><div class="line">    text-decoration: none;</div><div class="line">    color: #fff;</div><div class="line">    -webkit-transition: all .3s ease-in-out;</div><div class="line">&#125;</div><div class="line">a:hover, .glow &#123;</div><div class="line">    color: #ff0;</div><div class="line">    text-shadow: 0 0 10px #ff0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="带CSS3特色的横幅显示"><a href="#带CSS3特色的横幅显示" class="headerlink" title="带CSS3特色的横幅显示"></a>带CSS3特色的横幅显示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">.featureBanner &#123;</div><div class="line">    position: relative;</div><div class="line">    margin: 20px</div><div class="line">&#125;</div><div class="line">.featureBanner:before &#123;</div><div class="line">    content: &quot;Featured&quot;;</div><div class="line">    position: absolute;</div><div class="line">    top: 5px;</div><div class="line">    left: -8px;</div><div class="line">    padding-right: 10px;</div><div class="line">    color: #232323;</div><div class="line">    font-weight: bold;</div><div class="line">    height: 0px;</div><div class="line">    border: 15px solid #ffa200;</div><div class="line">    border-right-color: transparent;</div><div class="line">    line-height: 0px;</div><div class="line">    box-shadow: -0px 5px 5px -5px #000;</div><div class="line">    z-index: 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.featureBanner:after &#123;</div><div class="line">    content: &quot;&quot;;</div><div class="line">    position: absolute;</div><div class="line">    top: 35px;</div><div class="line">    left: -8px;</div><div class="line">    border: 4px solid #89540c;</div><div class="line">    border-left-color: transparent;</div><div class="line">    border-bottom-color: transparent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转载-&gt;<a href="http://www.ido321.com/1565.html" target="_blank" rel="external">http://www.ido321.com/1565.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS3-斑马线&quot;&gt;&lt;a href=&quot;#CSS3-斑马线&quot; class=&quot;headerlink&quot; title=&quot;CSS3 斑马线&quot;&gt;&lt;/a&gt;CSS3 斑马线&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一些有用CSS代码片段(一)</title>
    <link href="http://yoursite.com/2016/11/15/cssPart/"/>
    <id>http://yoursite.com/2016/11/15/cssPart/</id>
    <published>2016-11-15T13:20:32.000Z</published>
    <updated>2016-12-07T13:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="垂直对齐"><a href="#垂直对齐" class="headerlink" title="垂直对齐"></a>垂直对齐</h2><p></p><p><br>如果你用CSS，则你会有困惑：我该怎么垂直对齐容器中的元素？现在，利用CSS3的Transform，可以很优雅的解决这个困惑：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.verticalcenter&#123;</div><div class="line">    position: relative;</div><div class="line">    top: 50%;</div><div class="line">    -webkit-transform: translateY(-50%);</div><div class="line">    -o-transform: translateY(-50%);</div><div class="line">    transform: translateY(-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<h2 id="背景渐变动画"><a href="#背景渐变动画" class="headerlink" title="背景渐变动画"></a>背景渐变动画</h2><p></p><p><br>CSS中最具诱惑的一个功能是能添加动画效果，除了渐变，你可以给背景色、透明度、元素大小添加动画。目前，你不能为渐变添加动画，但下面的代码可能有帮助。它通过改变背景位置，让它看起来有动画效果。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">button &#123;</div><div class="line">    background-image: linear-gradient(#5187c4, #1c2f45);</div><div class="line">    background-size: auto 200%;</div><div class="line">    background-position: 0 100%;</div><div class="line">    transition: background-position 0.5s;</div><div class="line">&#125;    </div><div class="line">button:hover &#123;</div><div class="line">    background-position: 0 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<h2 id="CSS：表格列宽自适用"><a href="#CSS：表格列宽自适用" class="headerlink" title="CSS：表格列宽自适用"></a>CSS：表格列宽自适用</h2><p></p><p><br>对于表格，当谈到调整列宽时，是比较痛苦的。然后，这里有一个可以使用的技巧：给td元素添加 white-space: nowrap;能让文本正确的换行<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">td &#123;</div><div class="line">    white-space: nowrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<h2 id="只在一边或两边显示盒子阴影"><a href="#只在一边或两边显示盒子阴影" class="headerlink" title="只在一边或两边显示盒子阴影"></a>只在一边或两边显示盒子阴影</h2><p></p><p><br>如果你要一个盒阴影，试试这个技巧，能为任一边添加阴影。为了实现这个，首先定义一个有具体宽高的盒子，然后正确定位:after伪类。实现底边阴影的代码如下：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.box-shadow &#123;</div><div class="line">    background-color: #FF8020;</div><div class="line">    width: 160px;</div><div class="line">    height: 90px;</div><div class="line">    margin-top: -45px;</div><div class="line">    margin-left: -80px;</div><div class="line">    position: absolute;</div><div class="line">    top: 50%;</div><div class="line">    left: 50%;</div><div class="line">&#125;</div><div class="line">.box-shadow:after &#123;</div><div class="line">    content: &quot;&quot;;</div><div class="line">    width: 150px;</div><div class="line">    height: 1px;</div><div class="line">    margin-top: 88px;</div><div class="line">    margin-left: -75px;</div><div class="line">    display: block;</div><div class="line">    position: absolute;</div><div class="line">    left: 50%;</div><div class="line">    z-index: -1;</div><div class="line">    -webkit-box-shadow: 0px 0px 8px 2px #000000;</div><div class="line">       -moz-box-shadow: 0px 0px 8px 2px #000000;</div><div class="line">            box-shadow: 0px 0px 8px 2px #000000;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<h2 id="包裹长文本"><a href="#包裹长文本" class="headerlink" title="包裹长文本"></a>包裹长文本</h2><p></p><p><br>如果你碰到一个比自身容器长的文本，这个技巧对你很有用。在这个示例中，默认时，不管容器的宽度，文本都将水平填充。<br></p><br><img src="https://segmentfault.com/image?src=http://media02.hongkiat.com/simple-css-snippets/wrapping-long-text-before.jpg&amp;objectId=1190000002773955&amp;token=1ce75c7400f041e9da2d9045185c72c1" alt="https://segmentfault.com/image?src=http://media02.hongkiat.com/simple-css-snippets/wrapping-long-text-before.jpg&amp;objectId=1190000002773955&amp;token=1ce75c7400f041e9da2d9045185c72c1"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pre &#123;</div><div class="line">    white-space: pre-line;</div><div class="line">    word-wrap: break-word;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p><br>效果看起来如下：<br></p><br><img src="https://segmentfault.com/image?src=http://media02.hongkiat.com/simple-css-snippets/wrapping-long-text-after.jpg&amp;objectId=1190000002773955&amp;token=07541de0bc7468da5b077aa8a2a41a18" alt="https://segmentfault.com/image?src=http://media02.hongkiat.com/simple-css-snippets/wrapping-long-text-after.jpg&amp;objectId=1190000002773955&amp;token=07541de0bc7468da5b077aa8a2a41a18"><p></p>
<h2 id="制造模糊文本"><a href="#制造模糊文本" class="headerlink" title="制造模糊文本"></a>制造模糊文本</h2><p></p><p><br>想要让文本模糊？可以使用color透明和text-shadow实现。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.blurry-text &#123;</div><div class="line">   color: transparent;</div><div class="line">   text-shadow: 0 0 5px rgba(0,0,0,0.5);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<h2 id="用CSS动画实现省略号动画"><a href="#用CSS动画实现省略号动画" class="headerlink" title="用CSS动画实现省略号动画"></a>用CSS动画实现省略号动画</h2><p></p><p><br>这个片段将帮助你制造一个ellipsis的动画，对于简单的加载状态是很有用的，而不用去使用gif图像。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.loading:after &#123;</div><div class="line">    overflow: hidden;</div><div class="line">    display: inline-block;</div><div class="line">    vertical-align: bottom;</div><div class="line">    animation: ellipsis 2s infinite;</div><div class="line">    content: &quot;\2026&quot;; /* ascii code for the ellipsis character */</div><div class="line">&#125;</div><div class="line">@keyframes ellipsis &#123;</div><div class="line">    from &#123;</div><div class="line">        width: 2px;</div><div class="line">    &#125;</div><div class="line">    to &#123;</div><div class="line">        width: 15px;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<h2 id="典型的CSS清除浮动"><a href="#典型的CSS清除浮动" class="headerlink" title="典型的CSS清除浮动"></a>典型的CSS清除浮动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.clearfix:after &#123; content: &quot;.&quot;; display: block; clear: both; visibility: hidden; line-height: 0; height: 0; &#125;</div><div class="line">.clearfix &#123; display: inline-block; &#125;</div><div class="line"></div><div class="line">html[xmlns] .clearfix &#123; display: block; &#125;</div><div class="line">* html .clearfix &#123; height: 1%; &#125;</div></pre></td></tr></table></figure>
<h2 id="CSS引用模板"><a href="#CSS引用模板" class="headerlink" title="CSS引用模板"></a>CSS引用模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">blockquote &#123;</div><div class="line">    background: #f9f9f9;</div><div class="line">    border-left: 10px solid #ccc;</div><div class="line">    margin: 1.5em 10px;</div><div class="line">    padding: .5em 10px;</div><div class="line">    quotes: &quot;\201C&quot;&quot;\201D&quot;&quot;\2018&quot;&quot;\2019&quot;;</div><div class="line">&#125;</div><div class="line">blockquote:before &#123;</div><div class="line">    color: #ccc;</div><div class="line">    content: open-quote;</div><div class="line">    font-size: 4em;</div><div class="line">    line-height: .1em;</div><div class="line">    margin-right: .25em;</div><div class="line">    vertical-align: -.4em;</div><div class="line">&#125;</div><div class="line">blockquote p &#123;</div><div class="line">    display: inline;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="个性圆角"><a href="#个性圆角" class="headerlink" title="个性圆角"></a>个性圆角</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#container &#123;</div><div class="line">    -webkit-border-radius: 4px 3px 6px 10px;</div><div class="line">    -moz-border-radius: 4px 3px 6px 10px;</div><div class="line">    -o-border-radius: 4px 3px 6px 10px;</div><div class="line">    border-radius: 4px 3px 6px 10px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* alternative syntax broken into each line */</div><div class="line">#container &#123;</div><div class="line">    -webkit-border-top-left-radius: 4px;</div><div class="line">    -webkit-border-top-right-radius: 3px;</div><div class="line">    -webkit-border-bottom-right-radius: 6px;</div><div class="line">    -webkit-border-bottom-left-radius: 10px;</div><div class="line"></div><div class="line">    -moz-border-radius-topleft: 4px;</div><div class="line">    -moz-border-radius-topright: 3px;</div><div class="line">    -moz-border-radius-bottomright: 6px;</div><div class="line">    -moz-border-radius-bottomleft: 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="图片边框偏光"><a href="#图片边框偏光" class="headerlink" title="图片边框偏光"></a>图片边框偏光</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">img.polaroid &#123;</div><div class="line">    background:#000; /*Change this to a background image or remove*/</div><div class="line">    border:solid #fff;</div><div class="line">    border-width:6px 6px 20px 6px;</div><div class="line">    box-shadow:1px 1px 5px #333; /* Standard blur at 5px. Increase for more depth */</div><div class="line">    -webkit-box-shadow:1px 1px 5px #333;</div><div class="line">    -moz-box-shadow:1px 1px 5px #333;</div><div class="line">    height:200px; /*Set to height of your image or desired div*/</div><div class="line">    width:200px; /*Set to width of your image or desired div*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="锚链接伪类"><a href="#锚链接伪类" class="headerlink" title="锚链接伪类"></a>锚链接伪类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a:link &#123; color: blue; &#125;</div><div class="line">a:visited &#123; color: purple; &#125;</div><div class="line">a:hover &#123; color: red; &#125;</div><div class="line">a:active &#123; color: yellow; &#125;</div></pre></td></tr></table></figure>
<h2 id="CSS3：全屏背景"><a href="#CSS3：全屏背景" class="headerlink" title="CSS3：全屏背景"></a>CSS3：全屏背景</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">html &#123; </div><div class="line">    background: url(&apos;images/bg.jpg&apos;) no-repeat center center fixed; </div><div class="line">    -webkit-background-size: cover;</div><div class="line">    -moz-background-size: cover;</div><div class="line">    -o-background-size: cover;</div><div class="line">    background-size: cover;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="内容垂直居中"><a href="#内容垂直居中" class="headerlink" title="内容垂直居中"></a>内容垂直居中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">    min-height: 6.5em;</div><div class="line">    display: table-cell;</div><div class="line">    vertical-align: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="强制出现垂直滚动条"><a href="#强制出现垂直滚动条" class="headerlink" title="强制出现垂直滚动条"></a>强制出现垂直滚动条</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">html &#123; height: 101% &#125;</div></pre></td></tr></table></figure>
<h2 id="CSS3渐变模板"><a href="#CSS3渐变模板" class="headerlink" title="CSS3渐变模板"></a>CSS3渐变模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#colorbox &#123;</div><div class="line">    background: #629721;</div><div class="line">    background-image: -webkit-gradient(linear, left top, left bottom, from(#83b842), to(#629721));</div><div class="line">    background-image: -webkit-linear-gradient(top, #83b842, #629721);</div><div class="line">    background-image: -moz-linear-gradient(top, #83b842, #629721);</div><div class="line">    background-image: -ms-linear-gradient(top, #83b842, #629721);</div><div class="line">    background-image: -o-linear-gradient(top, #83b842, #629721);</div><div class="line">    background-image: linear-gradient(top, #83b842, #629721);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>转载-&gt;<a href="https://segmentfault.com/a/1190000002773955" target="_blank" rel="external">https://segmentfault.com/a/1190000002773955</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;垂直对齐&quot;&gt;&lt;a href=&quot;#垂直对齐&quot; class=&quot;headerlink&quot; title=&quot;垂直对齐&quot;&gt;&lt;/a&gt;垂直对齐&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;如果你用CSS，则你会有困惑：我该怎么垂直对齐容器中的元素？现在，利用CSS3的Transform，可
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>html单个标签实现跑马灯效果</title>
    <link href="http://yoursite.com/2016/11/11/marquee/"/>
    <id>http://yoursite.com/2016/11/11/marquee/</id>
    <published>2016-11-11T12:48:42.000Z</published>
    <updated>2016-12-07T13:07:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><br>marquee标签，它是成对出现的标签，首标签<code>&lt;marquee&gt;</code>和尾标签<code>&lt;/marquee&gt;</code>之间的内容就是滚动内容。marquee标签的属性主要有behavior、bgcolor、direction、width、height、hspace、vspace、loop、scrollamount、scrolldelay等，它们都是可选的。<br></p>

<h2 id="behavior属性"><a href="#behavior属性" class="headerlink" title="behavior属性"></a>behavior属性</h2><p><br>behavior属性的参数值为alternate、scroll、slide中的一个，分别表示文字来回滚动、单方向循环滚动、只滚动一次，需要注意的是：如果在<code>&lt;marquee&gt;</code>标签中同时出现了direction和behavior属性，那么scroll和slide的滚动方向将依照direction属性中参数的设置。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;marquee behavior=&quot;alternate&quot;&gt;我来回滚动&lt;/marquee&gt; </div><div class="line">   &lt;marquee behavior=&quot;scroll&quot;&gt;我单方向循环滚动&lt;/marquee&gt;</div><div class="line">   &lt;marquee behavior=&quot;scroll&quot; direction=&quot;up&quot; height=&quot;30&quot;&gt;我改单方向向上循环滚动&lt;/marquee&gt;            </div><div class="line">   &lt;marquee behavior=&quot;slide&quot;&gt;我只滚动一次&lt;/marquee&gt; </div><div class="line">   &lt;marquee behavior=&quot;slide&quot; direction=&quot;up&quot;&gt;我改向上只滚动一次了&lt;/marquee&gt;</div></pre></td></tr></table></figure>
<h2 id="bgcolor属性"><a href="#bgcolor属性" class="headerlink" title="bgcolor属性"></a>bgcolor属性</h2><p><br>文字滚动范围的背景颜色，参数值是16进制（形式：#AABBCC或#AA5566等）或预定义的颜色名字（如red、yellow、blue等）。如下所示：<code>&lt;marquee behavior==&quot;slide&quot; direction=&quot;left&quot; bgcolor=&quot;red&quot;&gt;我的背景色是红色的&lt;/marquee&gt;</code><br></p>

<h2 id="direction属性"><a href="#direction属性" class="headerlink" title="direction属性"></a>direction属性</h2><p><br>文字滚动的方向，属性的参数值有down、left、right、up共四个单一可选值，分别代表滚动方向向下、向左、向右、向上。如下所示：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;marquee direction=&quot;right&quot;&gt;我向右滚动&lt;/marquee&gt; </div><div class="line">   &lt;marquee direction=&quot;right&quot;&gt;我向下滚动&lt;/marquee&gt;</div></pre></td></tr></table></figure><br><br>## width和height属性<br><p><br>width和height属性的作用决定滚动文字在页面中的矩形范围大小。width属性用以规定矩形的宽度，height属性规定矩形的高度。这两个属性的参数值可以是数字或者百分数，数字表示矩形所占的（宽或高）像素点数，百分数表示矩形所占浏览器窗口的（宽或高）百分比。如下所示：<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;marquee width=&quot;300&quot; height=&quot;30&quot; bgcolor=&quot;red&quot;&gt;我宽300像素，高30像素。&lt;/marquee&gt;</div></pre></td></tr></table></figure>
<h2 id="hspace和vspace属性"><a href="#hspace和vspace属性" class="headerlink" title="hspace和vspace属性"></a>hspace和vspace属性</h2><p><br>这两个属性决定滚动矩形区域距周围的空白区域.<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;marquee width=&quot;300&quot; height=&quot;30&quot; vspace=&quot;10&quot; hspace=&quot;10&quot; bgcolor=&quot;red&quot;&gt;我矩形边缘水平和垂直距周围各10像素。&lt;/marquee&gt; </div><div class="line">   &lt;marquee width=&quot;300&quot; height=&quot;30&quot; vspace=&quot;50&quot; hspace=&quot;50&quot; bgcolor=&quot;red&quot;&gt;我矩形边缘水平和垂直距周围各50像素。&lt;/marquee&gt;</div></pre></td></tr></table></figure><br><br>## loop属性<br><p><br>loop属性决定滚动文字的滚动次数，缺省是无限循环。参数值可以是任意的正整数，如果设置参数值为-1或infinite时将无限循环。如下所示：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;marquee loop=&quot;2&quot;&gt;我滚动2次。&lt;/marquee&gt; </div><div class="line">  &lt;marquee loop=&quot;infinite&quot;&gt;我无限循环滚动。&lt;/marquee&gt; </div><div class="line">  &lt;marquee loop=&quot;-1&quot;&gt;我无限循环滚动。&lt;/marquee&gt;</div></pre></td></tr></table></figure><br><br>## scrollamount和scrolldelay属性<br><p><br>这两个属性决定文字滚动的速度（scrollamount）和延时（scrolldelay），参数值都是正整数。如下所示：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;marquee scrollamount=&quot;100&quot;&gt;我速度很快.&lt;/marquee&gt; </div><div class="line">   &lt;marquee scrollamount=&quot;50&quot;&gt;我慢了些。&lt;/marquee&gt; </div><div class="line">   &lt;marquee scrolldelay=&quot;30&quot;&gt;我小步前进。&lt;/marquee&gt; </div><div class="line">   &lt;marquee scrolldelay=&quot;1000&quot; scrollamount=&quot;100&quot;&gt;我大步前进。&lt;/marquee&gt;</div></pre></td></tr></table></figure><br><br>## align属性<br><p><br>这个属性决定滚动文字位于距形内边框的上下左右位置。您也可以将<marquee>和</marquee>之间的内容替换为图像或其它对象等功能。<br></p>

<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><br>direction 表示滚动的方向，值可以是left，right，up，down，默认为left<br><br>　　behavior 表示滚动的方式，值可以是scroll（连续滚动）slide（滑动一次）alternate（来回滚动）<br><br>　　loop 表示循环的次数，值是正整数，默认为无限循环<br><br>　　scrollamount 表示运动速度，值是正整数，默认为6<br><br>　　scrolldelay 表示停顿时间，值是正整数，默认为0，单位是毫秒<br><br>　　align 表示元素的垂直对齐方式，值可以是top，middle，bottom，默认为middle<br><br>　　bgcolor 表示运动区域的背景色，值是16进制的RGB颜色，默认为白色<br><br>　　height、width 表示运动区域的高度和宽度，值是正整数（单位是像素）或百分数，默认width=100% height为标签内元素的高度。<br><br>　　hspace、vspace 表示元素到区域边界的水平距离和垂直距离，值是正整数，单位是像素。<br><br>　　onmouseover=this.stop() onmouseout=this.start() 表示当鼠标以上区域的时候滚动停止，当鼠标移开的时候又继续滚动。<br></p>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><br>MARQUEE 元素的默认宽度与其父元素的宽度相等。如果 MARQUEE 位于没有指定宽度的 TD 内，你就需要明确设置 MARQUEE 的宽度。如果 MARQUEE 和 TD 的宽度都没有指定，那么滚动字幕就将限定于 1 个像素宽。<br><br>　　要创建垂直滚动的字幕，请将其 scrollLeft 属性设定为 0。要创建水平滚动的字幕，请将其 scrollTop 属性设定为 0，这将覆盖任何脚本设置。<br><br>　　scrollLeft 和 scrollTop 属性当字幕滚动时为只读。当不处于滚动状态时，scrollLeft 对于设置为水平滚动的字幕来说为可读写，scrollTop 对于设置为垂直滚动的字幕来说为可读写。<br><br>　　此元素在 Microsoft® Internet Explorer 3.0 的 HTML 中可用，在 Internet Explorer 4.0 的脚本中可用。<br><br>　　此元素是块元素。<br><br>　　此元素需要关闭标签。<br></p>

<p>原文-&gt;<a href="http://www.cnblogs.com/jc5426226/p/5851032.html" target="_blank" rel="external">http://www.cnblogs.com/jc5426226/p/5851032.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;marquee标签，它是成对出现的标签，首标签&lt;code&gt;&amp;lt;marquee&amp;gt;&lt;/code&gt;和尾标签&lt;code&gt;&amp;lt;/marquee&amp;gt;&lt;/code&gt;之间的内容就是滚动内容。marquee标签的属性主要有behavior、bgcolor、direc
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>说一说z-index容易被忽略的那些特性</title>
    <link href="http://yoursite.com/2016/11/09/z-index/"/>
    <id>http://yoursite.com/2016/11/09/z-index/</id>
    <published>2016-11-09T12:30:11.000Z</published>
    <updated>2016-12-07T12:42:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><br>HTML文档中有三个div元素，每个div中存在一个span元素，三个span元素分别设置背景颜色为red，green，以及blue。然后每个span都设置为<code>position: absolute，</code>三个span的位置稍微错开以便可以仔细观察它们之间的堆叠顺序。然后将第一个span元素的z-index设置为1，其他两个不设置。具体代码如下：<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  &lt;span class=&quot;red&quot;&gt;Red&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div&gt;</div><div class="line">  &lt;span class=&quot;green&quot;&gt;Green&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div&gt;</div><div class="line">  &lt;span class=&quot;blue&quot;&gt;Blue&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;style&gt;</div><div class="line">.red, .green, .blue &#123;</div><div class="line">  position: absolute;</div><div class="line">  width: 200px;</div><div class="line">  height: 200px;</div><div class="line">&#125;</div><div class="line">.red &#123;</div><div class="line">  background: red;</div><div class="line">  z-index: 1;</div><div class="line">&#125;</div><div class="line">.green &#123;</div><div class="line">  background: green;</div><div class="line">  top: 50px;</div><div class="line">  left: 50px;</div><div class="line">&#125;</div><div class="line">.blue &#123;</div><div class="line">  background: blue;</div><div class="line">  top: 100px;</div><div class="line">  left: 100px;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161206110348135" alt="20161206110348135"></p>
<p><br>那么问题来了，尝试在不打破下述规则的前提下将red span置于blue和green span元素之下：<br><br>    不改变HTML元素的标记<br>    不添加或者改变任何元素的z-index属性<br>    不添加或者改变任何元素的position属性<br>如果不了解z-index的一些特性，对于上述要求估计会有些烦恼。<br></p>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><br>在第一个div（也就是red span）上面添加一个值小于1的opacity属性，如下所示：<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div:first-child &#123;</div><div class="line">  opacity: .99;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161206110628073" alt="20161206110628073"></p>
<p><br>可以看到opacity属性影响到了元素的堆叠顺序，这里就要说一下元素的堆叠顺序了。<br></p>

<h2 id="堆叠顺序"><a href="#堆叠顺序" class="headerlink" title="堆叠顺序"></a>堆叠顺序</h2><p><br>在HTML文档中有一个不变的堆叠准则，任何一个元素都可以叠放在其他元素之上或者之下，决定元素叠放顺序的规则其实很清晰。<br><br>    当不包含z-index属性和position属性时，规则很简单，所有元素的叠放顺序与其所在HTML文档中出现的先后顺序一致。（当然使用负margin来重叠内联元素的特例除外。）<br><br>    当元素浮动float时，浮动块元素被放置于非定位块元素与定位块元素之间，具体的讲，浮动元素显示在普通流中的后代块元素之上，常规流中的后代行内元素之下。<br><br>    当加入position位置属性时，所有具有position属性的元素及其子元素会显示在其他不具有position属性的元素上面。（本文中具有position属性的元素指代的均是元素的position属性的值为除了static的其他值，如relative、absolute。）<br><br>    当引入z-index属性时，规则稍微变得复杂一点。<br>    1) z-index只在设置了position属性的元素上有效，没有position属性的元素上的z-index属性均不生效。<br>    2) z-index值会产生堆叠上下文。<br></p>

<h2 id="堆叠上下文"><a href="#堆叠上下文" class="headerlink" title="堆叠上下文"></a>堆叠上下文</h2><p><br>拥有共同父元素的一组元素共同前移或者后移构成了一个堆叠上下文。每个堆叠上下文有一个单一的根元素，当元素上形成一个新的堆叠上下文时，堆叠上下文中的所有子元素按照堆叠顺序被局限在一个固定的区域内。一个堆叠上下文构成一个整体，其内部元素有相对不同的堆叠顺序，但与其他堆叠上下文比较时，只能整体上移或者下移。<br><br>通俗的讲，如果某个元素被置于其所在堆叠上下文的最底层，我们是没有办法让他显示在另一个拥有更高层的堆叠上下文元素之上的，哪怕你将其z-index设置为无限大。那构成一个堆叠上下文的规则是怎样的呢？有如下情况：<br><br>    文档的根元素<br><br>    元素拥有position属性（除static属性之外），同事设置了不为auto的z-index属性。<br><br>    元素拥有opacity属性，且取值小于1<br><br>    一些新的css属性，如filter、css-regions等需要离屏渲染的属性，均能使元素形成堆叠上下文。<br><br>    指定position:fixed的元素，技术z-index为auto。<br></p>

<h2 id="同一堆叠上下文内子元素的堆叠顺序"><a href="#同一堆叠上下文内子元素的堆叠顺序" class="headerlink" title="同一堆叠上下文内子元素的堆叠顺序"></a>同一堆叠上下文内子元素的堆叠顺序</h2><p><br>从底层到上层依次为：<br><br>    堆叠上下文的根元素<br><br>    设置了position属性，并且z-index为负的元素及其子元素，z-index值较大的元素置于较小元素之上，同等属性值的元素按照html中出现的先后顺序堆叠。<br><br>    没有设置position的元素<br><br>    设置了position属性，并且z-index属性为auto的元素。<br><br>    设置了position属性，并且z-index属性为正值的元素。<br></p>

<h2 id="不同堆叠上下文"><a href="#不同堆叠上下文" class="headerlink" title="不同堆叠上下文"></a>不同堆叠上下文</h2><p><br>    堆叠上下文可以嵌入其他堆叠上下文。<br><br>    每个堆叠上下文和他的统计上下文是独立的。<br><br>    堆叠上下文中子元素按照前述顺序摆放。<br><br>    堆叠上下文内部的子堆叠上下文的z-index只在父堆叠上下文中有意义。<br></p>


<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><br>在阐述完堆叠上下文的形成、堆叠上下文之间的堆叠规则，堆叠上下文内的堆叠顺序后，让我们回到文章最开始的问题。<br>起初元素的叠放顺序如下：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;  //1</div><div class="line">  &lt;span class=&quot;red&quot;&gt;&lt;/span&gt;    //6</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div&gt;  //2</div><div class="line">  &lt;span class=&quot;green&quot;&gt;&lt;span&gt; //4</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div&gt;  //3</div><div class="line">  &lt;span class=&quot;blue&quot;&gt;&lt;/span&gt;  //5</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><br><br><p><br>当添加属性opacity: 0.99后，第一个div形成了一个新的堆叠上下文，red span成为了新的上下文中的第一个子元素。元素结构变为：<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;  //1</div><div class="line">  &lt;span class=&quot;red&quot;&gt;&lt;/span&gt;    //1.1</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div&gt;  //2</div><div class="line">  &lt;span class=&quot;green&quot;&gt;&lt;span&gt; //4</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div&gt;  //3</div><div class="line">  &lt;span class=&quot;blue&quot;&gt;&lt;/span&gt;  //5</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>转载-&gt;<a href="http://blog.csdn.net/u014346301/article/details/53484968" target="_blank" rel="external">http://blog.csdn.net/u014346301/article/details/53484968</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;&lt;br&gt;HTML文档中有三个div元素，每个div中存在一个span元素，三个span元素分别设置背景颜色为red，green，以及blue
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript易错知识点整理</title>
    <link href="http://yoursite.com/2016/11/05/jsBug/"/>
    <id>http://yoursite.com/2016/11/05/jsBug/</id>
    <published>2016-11-05T06:44:14.000Z</published>
    <updated>2016-12-07T06:58:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-变量作用域"><a href="#1-变量作用域" class="headerlink" title="1.变量作用域"></a>1.变量作用域</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">function test() &#123;</div><div class="line">    var a = 2;</div><div class="line"></div><div class="line">    console.log(a); // 2</div><div class="line">&#125;</div><div class="line"></div><div class="line">test();</div></pre></td></tr></table></figure>
<p><br>上方的函数作用域中声明并赋值了a，且在console之上，所以遵循就近原则输出a等于2。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">function test2() &#123;</div><div class="line">    console.log(a); // undefined</div><div class="line"></div><div class="line">    var a = 2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">test2();</div></pre></td></tr></table></figure>
<p><br>上方的函数作用域中虽然声明并赋值了a，但位于console之下，a变量被提升，输出时已声明但尚未被赋值，所以输出“undefined”。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">function test3() &#123;</div><div class="line">    console.log(a); // 1</div><div class="line"></div><div class="line">    a = 2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">test3();</div></pre></td></tr></table></figure>
<p><br>上方的函数作用域中a被重新赋值，未被重新声明，且位于console之下，所以输出全局作用域中的a。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">let b = 1;</div><div class="line">function test4() &#123;</div><div class="line">    console.log(b); // b is not defined</div><div class="line"></div><div class="line">    let b = 2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">test4();</div></pre></td></tr></table></figure>
<p><br>上方函数作用域中使用了ES6的let重新声明了变量b，而let不同于var其不存在变量提升的功能，所以输出报错“b is not defined”。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function test5() &#123;</div><div class="line">    let a = 1;</div><div class="line"></div><div class="line">    &#123;</div><div class="line">        let a = 2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    console.log(a); // 1</div><div class="line">&#125;</div><div class="line"></div><div class="line">test5();</div></pre></td></tr></table></figure>
<p><br>上方的函数作用域中用let声明了a为1，并在块级作用域中声明了a为2，因为console并不在函数内的块级作用域中，所以输出1。<br></p>

<h2 id="2-类型比较"><a href="#2-类型比较" class="headerlink" title="2.类型比较"></a>2.类型比较</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [],</div><div class="line">    arr2 = [1];</div><div class="line"></div><div class="line">console.log(arr === arr2); // false</div></pre></td></tr></table></figure>
<p><br>上方两个不同的数组比较，console为false。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [],</div><div class="line">    arr2 = [];</div><div class="line"></div><div class="line">console.log(arr === arr2); // false</div></pre></td></tr></table></figure>
<p><br>上方两个相同的数组比较，因为两个单独的数组永不相等，所以console为false。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [],</div><div class="line">    arr2 = &#123;&#125;;</div><div class="line"></div><div class="line">console.log(typeof(arr) === typeof(arr2)); // true</div></pre></td></tr></table></figure>
<p><br>上方利用typeof比较数组和对象，因为typeof获取NULL、数组、对象的类型都为object，所以console为true。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [];</div><div class="line"></div><div class="line">console.log(arr instanceof Object); // true</div><div class="line">console.log(arr instanceof Array); // true</div></pre></td></tr></table></figure>
<p><br>上方利用instanceof判断一个变量是否属于某个对象的实例，因为在JavaScript中数组也是对象的一种，所以两个console都为true。<br></p>

<h2 id="3-this指向"><a href="#3-this指向" class="headerlink" title="3.this指向"></a>3.this指向</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">    name: &apos;xiaoming&apos;,</div><div class="line">    getName: function () &#123;</div><div class="line">        return this.name</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">console.log(obj.getName());  // &apos;xiaoming&apos;</div></pre></td></tr></table></figure>
<p><br>上方对象方法中的this指向对象本身，所以输出”xiaoming”。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">    myName: &apos;xiaoming&apos;,</div><div class="line">    getName: function () &#123;</div><div class="line">        return this.myName</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var nameFn = obj.getName;</div><div class="line"></div><div class="line">console.log(nameFn()); // undefined</div></pre></td></tr></table></figure>
<p><br>上方将对象中的方法赋值给了一个变量，此时方法中的this也将不再指向obj对象，从而指向window对象，所以console为”undefined”。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">    myName: &apos;xiaoming&apos;,</div><div class="line">    getName: function () &#123;</div><div class="line">        return this.myName</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var obj2 = &#123;</div><div class="line">    myName: &apos;xiaohua&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var nameFn = obj.getName;</div><div class="line"></div><div class="line">console.log(nameFn.apply(obj2)); // &apos;xiaohua&apos;</div></pre></td></tr></table></figure>
<p><br>上方同样将obj对象中的方法赋值给了变量nameFn，但是通过apply方法将this指向了obj2对象，所以最终console为’xiaohua’。<br></p>


<h2 id="4-函数参数"><a href="#4-函数参数" class="headerlink" title="4.函数参数"></a>4.函数参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function test6() &#123;</div><div class="line">    console.log(Array.prototype.slice.call(arguments)); // [1, 2]</div><div class="line">&#125;</div><div class="line"></div><div class="line">test6(1, 2);</div></pre></td></tr></table></figure>
<p><br>上方利用函数中的arguments类数组对象获取传入函数的参数数组，所以输出数组[1, 2]。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function test7 () &#123;</div><div class="line">    return function () &#123;</div><div class="line">        console.log(Array.prototype.slice.call(arguments)); // 未执行到此，无输出</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">test7(1, 2);</div></pre></td></tr></table></figure>
<p><br>上方同样利用arguments获取参数，但因test7(1, 2)未执行return中的函数，所以无输出，若执行test7(1, 2)(3, 4)则会输出[3, 4]。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var args = [1, 2];</div><div class="line"></div><div class="line">function test9() &#123;</div><div class="line">    console.log(Array.prototype.slice.call(arguments)); // [1, 2, 3, 4]</div><div class="line">&#125;</div><div class="line"></div><div class="line">Array.prototype.push.call(args, 3, 4);</div><div class="line"></div><div class="line">test9(...args);</div></pre></td></tr></table></figure>
<p><br>上方利用Array.prototype.push.call()方法向args数组中插入了3和4，并利用ES6延展操作符(…)将数组展开并传入test9，所以console为[1, 2, 3, 4]。<br></p>

<h2 id="5-闭包问题"><a href="#5-闭包问题" class="headerlink" title="5.闭包问题"></a>5.闭包问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var elem = document.getElementsByTagName(&apos;div&apos;); // 如果页面上有5个div</div><div class="line"></div><div class="line">for(var i = 0; i &lt; elem.length; i++) &#123;</div><div class="line">    elem[i].onclick = function () &#123;</div><div class="line">        alert(i); // 总是5</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br>上方是一个很常见闭包问题，点击任何div弹出的值总是5，因为当你触发点击事件的时候i的值早已是5，可以用下面方式解决：<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var elem = document.getElementsByTagName(&apos;div&apos;); // 如果页面上有5个div</div><div class="line"></div><div class="line">for(var i = 0; i &lt; elem.length; i++) &#123;</div><div class="line">    (function (w) &#123;</div><div class="line">        elem[w].onclick = function () &#123;</div><div class="line">            alert(w); // 依次为0,1,2,3,4</div><div class="line">        &#125;;</div><div class="line">    &#125;)(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br>在绑定点击事件外部封装一个立即执行函数，并将i传入该函数即可。<br></p>

<h2 id="6-对象拷贝与赋值"><a href="#6-对象拷贝与赋值" class="headerlink" title="6.对象拷贝与赋值"></a>6.对象拷贝与赋值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">    name: &apos;xiaoming&apos;,</div><div class="line">    age: 23</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var newObj = obj;</div><div class="line"></div><div class="line">newObj.name = &apos;xiaohua&apos;;</div><div class="line"></div><div class="line">console.log(obj.name); // &apos;xiaohua&apos;</div><div class="line">console.log(newObj.name); // &apos;xiaohua&apos;</div></pre></td></tr></table></figure>
<p><br>上方我们将obj对象赋值给了newObj对象，从而改变newObj的name属性，但是obj对象的name属性也被篡改，这是因为实际上newObj对象获得的只是一个内存地址，而不是真正 的拷贝，所以obj对象被篡改。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var obj2 = &#123;</div><div class="line">    name: &apos;xiaoming&apos;,</div><div class="line">    age: 23</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var newObj2 = Object.assign(&#123;&#125;, obj2, &#123;color: &apos;blue&apos;&#125;);</div><div class="line"></div><div class="line">newObj2.name = &apos;xiaohua&apos;;</div><div class="line"></div><div class="line">console.log(obj2.name); // &apos;xiaoming&apos;</div><div class="line">console.log(newObj2.name); // &apos;xiaohua&apos;</div><div class="line">console.log(newObj2.color); // &apos;blue&apos;</div></pre></td></tr></table></figure>
<p><br>上方利用Object.assign()方法进行对象的深拷贝可以避免源对象被篡改的可能。因为Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var obj3 = &#123;</div><div class="line">    name: &apos;xiaoming&apos;,</div><div class="line">    age: 23</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var newObj3 = Object.create(obj3);</div><div class="line"></div><div class="line">newObj3.name = &apos;xiaohua&apos;;</div><div class="line"></div><div class="line">console.log(obj3.name); // &apos;xiaoming&apos;</div><div class="line">console.log(newObj3.name); // &apos;xiaohua&apos;</div></pre></td></tr></table></figure>
<p><br>我们也可以使用Object.create()方法进行对象的拷贝，Object.create()方法可以创建一个具有指定原型对象和属性的新对象。<br></p>


<p>转载-&gt;<a href="https://gold.xitu.io/post/584268a561ff4b006c27c7b9" target="_blank" rel="external">https://gold.xitu.io/post/584268a561ff4b006c27c7b9</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-变量作用域&quot;&gt;&lt;a href=&quot;#1-变量作用域&quot; class=&quot;headerlink&quot; title=&quot;1.变量作用域&quot;&gt;&lt;/a&gt;1.变量作用域&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript面向对象与原型</title>
    <link href="http://yoursite.com/2016/11/02/jsObject/"/>
    <id>http://yoursite.com/2016/11/02/jsObject/</id>
    <published>2016-11-02T07:46:33.000Z</published>
    <updated>2016-12-02T08:36:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工厂模式：无法识别对象"><a href="#工厂模式：无法识别对象" class="headerlink" title="工厂模式：无法识别对象"></a>工厂模式：无法识别对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function createObject(name, age) &#123; //集中实例化的函数</div><div class="line">　　var obj = new Object();</div><div class="line">　　obj.name = name;</div><div class="line">　　obj.age = age;</div><div class="line">　　obj.run = function () &#123;</div><div class="line">　　　　return this.name + this.age + &apos;运行中...&apos;;</div><div class="line">　　&#125;;</div><div class="line">　　return obj;</div><div class="line">&#125;</div><div class="line">var box1 = createObject(&apos;Lee&apos;, 100); //第一个实例</div><div class="line">var box2 = createObject(&apos;Jack&apos;, 200); //第二个实例</div><div class="line">alert(box1.run());</div><div class="line">alert(box2.run()); //保持独立</div><div class="line">alert(typeof box1); //Object</div><div class="line">alert(box1 instanceof Object); //true</div></pre></td></tr></table></figure>
<h2 id="构造函数-构造方法-：可以识别对象"><a href="#构造函数-构造方法-：可以识别对象" class="headerlink" title="构造函数(构造方法)：可以识别对象"></a>构造函数(构造方法)：可以识别对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function Box(name, age) &#123; //构造函数模式</div><div class="line">　　this.name = name;</div><div class="line">　　this.age = age;</div><div class="line">　　this.run = function () &#123;</div><div class="line">　　　　return this.name + this.age + &apos;运行中...&apos;;</div><div class="line">　　&#125;;</div><div class="line">&#125;</div><div class="line">var box1 = new Box(&apos;Lee&apos;, 100); //new Box()即可</div><div class="line">var box2 = new Box(&apos;Jack&apos;, 200);</div><div class="line">alert(box1.run());</div><div class="line">alert(box1 instanceof Box); //很清晰的识别他从属于 Box</div></pre></td></tr></table></figure>
<h2 id="构造函数的方法有一些规范："><a href="#构造函数的方法有一些规范：" class="headerlink" title="构造函数的方法有一些规范："></a>构造函数的方法有一些规范：</h2><p><br>1.函数名和实例化构造名相同且大写，(PS：非强制，但这么写有助于区分构造函数和普通函数)；<br>2.通过构造函数创建对象，必须使用 new 运算符。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var o = new Object();</div><div class="line">Box.call(o, &apos;Jack&apos;, 200) //对象冒充调用</div><div class="line">alert(o.run());</div></pre></td></tr></table></figure><br><br><p><br>原型（共享）：创建的每个函数都有一个 prototype(原型)属性，这个属性是一个对象，它的用途是包含可以由特定类型的所有实例共享的属性和方法。逻辑上可以这么理解：prototype 通过调用构造函数而创建的那个对象的原型对象。使用原型的好处可以让所有对象实例共享它所包含的属性和方法。也就是说，不必在构造函数中定义对象信息，而是可以直接将这些信息添加到原型中。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">unction Box() &#123;&#125; //声明一个构造函数</div><div class="line">Box.prototype.name = &apos;Lee&apos;; //在原型里添加属性</div><div class="line">Box.prototype.age = 100;</div><div class="line">Box.prototype.run = function () &#123; //在原型里添加方法</div><div class="line">　　return this.name + this.age + &apos;运行中...&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br><img src="https://zhaoxingzi.github.io/img/js.png" alt="js.png"><br><p><br>在原型模式声明中，多了两个属性，这两个属性都是创建对象时自动生成的。<br>proto属性：是实例指向原型对象的一个指针，它的作用就是指向构造函数的原型属性 constructor 。通过这两个属性，就可以访问到原型里的属性和方法了。<br>PS：IE 浏览器在脚本访问proto会不能识别，火狐和谷歌浏览器及其他某些浏览器均能识别。虽然可以输出，但无法获取内部信息。<br>判断一个对象是否指向了该构造函数的原型对象，可以使用 isPrototypeOf()方法来测试。<br>exp：alert(Box.prototype.isPrototypeOf(box)); //只要实例化对象，即都会指向<br></p>

<h2 id="原型模式的执行流程："><a href="#原型模式的执行流程：" class="headerlink" title="原型模式的执行流程："></a>原型模式的执行流程：</h2><p><br>1.先查找构造函数实例里的属性或方法，如果有，立刻返回；<br>2.如果构造函数实例里没有，则去它的原型对象里找，如果有，就返回；<br>虽然我们可以通过对象实例访问保存在原型中的值，但却不能访问通过对象实例重写原型中的值。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var box1 = new Box();</div><div class="line">alert(box1.name); //Lee，原型里的值</div><div class="line">box1.name = &apos;Jack&apos;;</div><div class="line">alert(box.1name); //Jack，就近原则，</div><div class="line">var box2 = new Box();</div><div class="line">alert(box2.name); //Lee，原型里的值，没有被 box1 修改</div><div class="line">如果想要 box1 也能在后面继续访问到原型里的值，可以把构造函数里的属性删除即可 ，具体如下：</div><div class="line">delete box1.name; //删除属性</div><div class="line">alert(box1.name);</div><div class="line">如何判断属性是在构造函数的实例里，还是在原型里？可以使用 hasOwnProperty()函数来验证：</div><div class="line">alert(box.hasOwnProperty(&apos;name&apos;)); //实例里有返回 true，否则返回 false</div></pre></td></tr></table></figure><br><br><p><br>in 操作符会在通过对象能够访问给定属性时返回 true，无论该属性存在于实例中还是原型中。<br>alert(‘name’ in box); //true，存在实例中或原型中<br>我们可以通过 hasOwnProperty()方法检测属性是否存在实例中，也可以通过 in 来判断实例或原型中是否存在属性。那么结合这两种方法，可以判断原型中是否存在属性。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function isProperty(object, property) &#123; //判断原型中是否存在属性</div><div class="line">　　return !object.hasOwnProperty(property) &amp;&amp; (property in object);</div><div class="line">&#125;</div><div class="line">var box = new Box();</div><div class="line">alert(isProperty(box, &apos;name&apos;)) //true，如果原型有</div></pre></td></tr></table></figure><br><br><p><br>    为了让属性和方法更好的体现封装的效果，并且减少不必要的输入，原型的创建可以使用字面量的方式：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function Box() &#123;&#125;;</div><div class="line">Box.prototype = &#123; //使用字面量的方式</div><div class="line">　　name : &apos;Lee&apos;,</div><div class="line">　　age : 100,</div><div class="line">　　run : function () &#123;</div><div class="line">　　　　return this.name + this.age + &apos;运行中...&apos;;</div><div class="line">　　&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><br><br><p><br>使用构造函数创建原型对象和使用字面量创建对象在使用上基本相同，但还是有一些区别，字面量创建的方式使用 constructor 属性不会指向实例，而会指向 Object，构造函数创建的方式则相反。<br>如果想让字面量方式的 constructor 指向实例对象，那么可以这么做：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Box.prototype = &#123;</div><div class="line">　　constructor : Box, //直接强制指向即可</div><div class="line">&#125;;</div></pre></td></tr></table></figure><br><br><p><br>原型对象不仅仅可以在自定义对象的情况下使用，而 ECMAScript 内置的引用类型都可以使用这种方式，并且内置的引用类型本身也使用了原型。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">alert(Array.prototype.sort); //sort 就是 Array 类型的原型方法</div><div class="line">alert(String.prototype.substring); //substring 就是 String 类型的原型方法</div><div class="line">String.prototype.addstring = function () &#123; //给 String 类型添加一个方法</div><div class="line">　　return this + &apos;，被添加了！&apos;; //this 代表调用的字符串</div><div class="line">&#125;;</div><div class="line">alert(&apos;Lee&apos;.addstring()); //使用这个方法</div></pre></td></tr></table></figure><br><br><p><br>PS：尽管给原生的内置引用类型添加方法使用起来特别方便，但我们不推荐使用这种方法。因为它可能会导致命名冲突，不利于代码维护。<br></p>

<h2 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function Box(name ,age) &#123; //将所有信息封装到函数体内</div><div class="line">　　this.name = name;</div><div class="line">　　this.age = age;</div><div class="line">　　if (typeof this.run != &apos;function&apos;) &#123; //仅在第一次调用的初始化</div><div class="line">　　　　Box.prototype.run = function () &#123;</div><div class="line">　　　　　　return this.name + this.age + &apos;运行中...&apos;;</div><div class="line">　　　　&#125;;</div><div class="line">　　&#125;</div><div class="line">&#125;</div><div class="line">var box = new Box(&apos;Lee&apos;, 100);</div><div class="line">alert(box.run());</div></pre></td></tr></table></figure>
<p><br>PS：使用动态原型模式，要注意一点，不可以再使用字面量的方式重写原型，因为会切断实例和新原型之间的联系。<br></p>

<h2 id="寄生构造函数"><a href="#寄生构造函数" class="headerlink" title="寄生构造函数"></a>寄生构造函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function Box(name, age) &#123;</div><div class="line">　　var obj = new Object();</div><div class="line">　　obj.name = name;</div><div class="line">　　obj.age = age;</div><div class="line">　　obj.run = function () &#123;</div><div class="line">　　　　return this.name + this.age + &apos;运行中...&apos;;</div><div class="line">　　&#125;;</div><div class="line">　　return obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="稳妥构造函数"><a href="#稳妥构造函数" class="headerlink" title="稳妥构造函数"></a>稳妥构造函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function Box(name , age) &#123;</div><div class="line">　　var obj = new Object();</div><div class="line">　　obj.run = function () &#123;</div><div class="line">　　　　return name + age + &apos;运行中...&apos;; //直接打印参数即可</div><div class="line">　　&#125;;</div><div class="line">　　return obj;</div><div class="line">&#125;</div><div class="line">var box = Box(&apos;Lee&apos;, 100); //直接调用函数</div><div class="line">alert(box.run());</div></pre></td></tr></table></figure>
<h2 id="继承：依靠原型链完成"><a href="#继承：依靠原型链完成" class="headerlink" title="继承：依靠原型链完成"></a>继承：依靠原型链完成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function Box() &#123; //Box 构造</div><div class="line">　　this.name = &apos;Lee&apos;;</div><div class="line">&#125;</div><div class="line">function Desk() &#123; //Desk 构造</div><div class="line">　　this.age = 100;</div><div class="line">&#125;</div><div class="line">Desk.prototype = new Box(); //Desc 继承了 Box，通过原型，形成链条</div><div class="line">var desk = new Desk();</div><div class="line">alert(desk.age);</div><div class="line">alert(desk.name); //得到被继承的属性</div><div class="line">function Table() &#123; //Table 构造</div><div class="line">　　this.level = &apos;AAAAA&apos;;</div><div class="line">&#125;</div><div class="line">Table.prototype = new Desk(); //继续原型链继承</div><div class="line">var table = new Table();</div><div class="line">alert(table.name); //继承了 Box 和 Desk</div></pre></td></tr></table></figure>
<p><img src="https://zhaoxingzi.github.io/img/js1.png" alt="js1.png"></p>
<p><br>在 JavaScript 里，被继承的函数称为超类型(父类，基类也行，其他语言叫法)，继承的函数称为子类型(子类，派生类)。继承也有之前问题，比如字面量重写原型会中断关系，使用引用类型的原型，并且子类型还无法给超类型传递参数。<br></p>

<h2 id="对象冒充-伪造对象、经典继承、借用构造函数-：解决引用共享和超类型无法传参的问题"><a href="#对象冒充-伪造对象、经典继承、借用构造函数-：解决引用共享和超类型无法传参的问题" class="headerlink" title="对象冒充(伪造对象、经典继承、借用构造函数)：解决引用共享和超类型无法传参的问题"></a>对象冒充(伪造对象、经典继承、借用构造函数)：解决引用共享和超类型无法传参的问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function Box(age) &#123;</div><div class="line">　　this.name = [&apos;Lee&apos;, &apos;Jack&apos;, &apos;Hello&apos;]</div><div class="line">　　this.age = age;</div><div class="line">&#125;</div><div class="line">function Desk(age) &#123;</div><div class="line">　　Box.call(this, age); //对象冒充，给超类型传参</div><div class="line">&#125;</div><div class="line">var desk = new Desk(200);</div><div class="line">alert(desk.age);</div><div class="line">alert(desk.name);</div><div class="line">desk.name.push(&apos;AAA&apos;); //添加的新数据，只给 desk</div><div class="line">alert(desk.name);</div></pre></td></tr></table></figure>
<h2 id="组合继承：原型链-借用构造函数"><a href="#组合继承：原型链-借用构造函数" class="headerlink" title="组合继承：原型链+ 借用构造函数"></a>组合继承：原型链+ 借用构造函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function Box(age) &#123;</div><div class="line">　　this.name = [&apos;Lee&apos;, &apos;Jack&apos;, &apos;Hello&apos;]</div><div class="line">　　this.age = age;</div><div class="line">&#125;</div><div class="line">Box.prototype.run = function () &#123;</div><div class="line">　　return this.name + this.age;</div><div class="line">&#125;;</div><div class="line">function Desk(age) &#123;</div><div class="line">　　Box.call(this, age); //对象冒充</div><div class="line">&#125;</div><div class="line">Desk.prototype = new Box(); //原型链继承</div><div class="line">var desk = new Desk(100);</div><div class="line">alert(desk.run());</div></pre></td></tr></table></figure>
<h2 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">function obj(o) &#123;     //传递一个字面量函数</div><div class="line">　　function F() &#123;&#125;    //临时新建一个构造函数，用来存储传递进来的对象</div><div class="line">　　F.prototype = o;    //将o对象实例赋值给F构造的原型对象</div><div class="line">　　return new F();    //返回实例化后的构造函数</div><div class="line">&#125;</div><div class="line">function create(box, desk) &#123;</div><div class="line">　　var f = obj(box.prototype);</div><div class="line">　　f.constructor = desk;</div><div class="line">　　desk.prototype = f;</div><div class="line">&#125;</div><div class="line">function Box(name) &#123;</div><div class="line">　　this.name = name;</div><div class="line">　　this.arr = [&apos;哥哥&apos;,&apos;妹妹&apos;,&apos;父母&apos;];</div><div class="line">&#125;</div><div class="line">Box.prototype.run = function () &#123;</div><div class="line">　　return this.name;</div><div class="line">&#125;;</div><div class="line">function Desk(name, age) &#123;</div><div class="line">　　Box.call(this, name);</div><div class="line">　　this.age = age;</div><div class="line">&#125;</div><div class="line">inPrototype(Box, Desk); //通过这里实现继承</div><div class="line">var desk = new Desk(&apos;Lee&apos;,100);</div><div class="line">desk.arr.push(&apos;姐姐&apos;);</div><div class="line">alert(desk.arr);</div><div class="line">alert(desk.run()); //只共享了方法</div><div class="line">var desk2 = new Desk(&apos;Jack&apos;, 200);</div><div class="line">alert(desk2.arr); //引用问题解决</div></pre></td></tr></table></figure>
<p>转载-&gt;<a href="http://www.cnblogs.com/sctnl/p/6086121.html" target="_blank" rel="external">http://www.cnblogs.com/sctnl/p/6086121.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工厂模式：无法识别对象&quot;&gt;&lt;a href=&quot;#工厂模式：无法识别对象&quot; class=&quot;headerlink&quot; title=&quot;工厂模式：无法识别对象&quot;&gt;&lt;/a&gt;工厂模式：无法识别对象&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
    
    </summary>
    
    
      <category term="JavaScript,面向对象" scheme="http://yoursite.com/tags/JavaScript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>css正方体滚动</title>
    <link href="http://yoursite.com/2016/10/31/cssCube/"/>
    <id>http://yoursite.com/2016/10/31/cssCube/</id>
    <published>2016-10-31T11:37:14.000Z</published>
    <updated>2016-12-01T11:41:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">		&lt;title&gt;立方体&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;div class=&quot;eyes&quot;&gt;</div><div class="line">			&lt;div class=&quot;box&quot;&gt;</div><div class="line">				&lt;div class=&quot;div1&quot;&gt;1&lt;/div&gt;</div><div class="line">				&lt;div class=&quot;div11&quot;&gt;1&lt;/div&gt;</div><div class="line">				&lt;div class=&quot;div2&quot;&gt;2&lt;/div&gt;</div><div class="line">				&lt;div class=&quot;div22&quot;&gt;2&lt;/div&gt;</div><div class="line">				&lt;div class=&quot;div3&quot;&gt;3&lt;/div&gt;</div><div class="line">				&lt;div class=&quot;div33&quot;&gt;3&lt;/div&gt;</div><div class="line">				&lt;div class=&quot;div4&quot;&gt;4&lt;/div&gt;</div><div class="line">				&lt;div class=&quot;div44&quot;&gt;4&lt;/div&gt;</div><div class="line">				&lt;div class=&quot;div5&quot;&gt;5&lt;/div&gt;</div><div class="line">				&lt;div class=&quot;div55&quot;&gt;5&lt;/div&gt;</div><div class="line">				&lt;div class=&quot;div6&quot;&gt;6&lt;/div&gt;</div><div class="line">				&lt;div class=&quot;div66&quot;&gt;6&lt;/div&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">	.eyes&#123;</div><div class="line">		perspective: 1200px;</div><div class="line">		perspective-origin: 50% 50%;</div><div class="line">	&#125;</div><div class="line">	.box&#123;</div><div class="line">		transform-style: preserve-3d;</div><div class="line">		background-color: red;				</div><div class="line">		height: 200px;</div><div class="line">		width: 200px;</div><div class="line">		margin-top: 30vh;</div><div class="line">		margin-left: 40vw;</div><div class="line">		position: absolute;</div><div class="line">		animation: move 9s linear infinite;</div><div class="line">		animation-direction: alternate;</div><div class="line">	&#125;</div><div class="line">	@keyframes move&#123;</div><div class="line">		0%&#123;transform: rotateX(0) rotateY(0);&#125;</div><div class="line">		100%&#123;transform: rotateX(720deg) rotateY(720deg);&#125;</div><div class="line">	&#125;</div><div class="line">	.box:hover .div1&#123;</div><div class="line">		transform: rotateX(90deg) translateZ(300px) scale(2,2);</div><div class="line">	&#125;</div><div class="line">	.box:hover .div2&#123;</div><div class="line">		transform: rotateX(270deg) translateZ(300px) scale(2,2);</div><div class="line">	&#125;</div><div class="line">	.box:hover .div3&#123;</div><div class="line">		transform: rotateY(270deg) translateZ(300px) scale(2,2);</div><div class="line">	&#125;</div><div class="line">	.box:hover .div4&#123;</div><div class="line">		transform: rotateY(90deg) translateZ(300px) scale(2,2);</div><div class="line">	&#125;</div><div class="line">	.box:hover .div5&#123;</div><div class="line">		transform: translateZ(300px) scale(2,2);</div><div class="line">	&#125;</div><div class="line">	.box:hover .div6&#123;</div><div class="line">		transform: translateZ(-300px) scale(2,2);</div><div class="line">	&#125;</div><div class="line">	.box div&#123;</div><div class="line">		width: 200px;</div><div class="line">		height: 200px;</div><div class="line">		font-size: 80px;</div><div class="line">		text-align: center;</div><div class="line">		line-height: 200px;</div><div class="line">		color: white;</div><div class="line">		position: absolute;</div><div class="line">		opacity: 0.5;</div><div class="line">	&#125;</div><div class="line">	.div1&#123;</div><div class="line">		background-color: lightblue;</div><div class="line">		transform: rotateX(90deg) translateZ(100px);</div><div class="line">		transition: 1s;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	.div11&#123;</div><div class="line">		background-color: lightblue;</div><div class="line">		transform: rotateX(90deg) translateZ(100px);</div><div class="line">		transition: 1s;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	.div2&#123;</div><div class="line">		background-color: red;</div><div class="line">		transform: rotateX(270deg) translateZ(100px);</div><div class="line">		transition: 1s;</div><div class="line">	&#125;</div><div class="line">	.div22&#123;</div><div class="line">		background-color: red;</div><div class="line">		transform: rotateX(270deg) translateZ(100px);</div><div class="line">		transition: 1s;</div><div class="line">	&#125;</div><div class="line">	.div3&#123;</div><div class="line">		background-color: yellow;</div><div class="line">		transform: rotateY(270deg) translateZ(100px);</div><div class="line">		transition: 1s;</div><div class="line">	&#125;</div><div class="line">	.div33&#123;</div><div class="line">		background-color: yellow;</div><div class="line">		transform: rotateY(270deg) translateZ(100px);</div><div class="line">		transition: 1s;</div><div class="line">	&#125;</div><div class="line">	.div4&#123;</div><div class="line">		background-color: lightgreen;</div><div class="line">		transform: rotateY(90deg) translateZ(100px);</div><div class="line">		transition: 1s;</div><div class="line">	&#125;</div><div class="line">	.div44&#123;</div><div class="line">		background-color: lightgreen;</div><div class="line">		transform: rotateY(90deg) translateZ(100px);</div><div class="line">		transition: 1s;</div><div class="line">	&#125;</div><div class="line">	.div5&#123;</div><div class="line">		background-color: purple;</div><div class="line">		transform: translateZ(100px);</div><div class="line">		transition: 1s;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	.div55&#123;</div><div class="line">		background-color: purple;</div><div class="line">		transform: translateZ(100px);</div><div class="line">		transition: 1s;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	.div6&#123;</div><div class="line">		background-color: pink;</div><div class="line">		transform: translateZ(-100px);</div><div class="line">		transition: 1s;</div><div class="line">	&#125;</div><div class="line">	.div66&#123;</div><div class="line">		background-color: pink;</div><div class="line">		transform: translateZ(-100px);</div><div class="line">		transition: 1s;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Math随机数做双色球</title>
    <link href="http://yoursite.com/2016/10/28/MathSuiji/"/>
    <id>http://yoursite.com/2016/10/28/MathSuiji/</id>
    <published>2016-10-28T08:07:55.000Z</published>
    <updated>2016-11-26T08:13:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">		&lt;title&gt;&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;div class=&quot;wrap&quot;&gt;</div><div class="line">			&lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;点击摇奖&quot;&gt;</div><div class="line">			&lt;div class=&quot;loading&quot;&gt;请开始摇奖&lt;/div&gt;</div><div class="line">			&lt;div class=&quot;case&quot;&gt;</div><div class="line">				&lt;ul&gt;					</div><div class="line">				&lt;/ul&gt;</div><div class="line">				&lt;ol&gt;					</div><div class="line">				&lt;/ol&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		&lt;/div&gt;	</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">	.wrap&#123;</div><div class="line">		width: 400px;</div><div class="line">		height: 600px;</div><div class="line">		background-color: red;</div><div class="line">		position: relative;</div><div class="line">		margin: 0 auto;</div><div class="line">	&#125;</div><div class="line">	.wrap .btn&#123;</div><div class="line">		width: 150px;</div><div class="line">		height: 40px;</div><div class="line">		font-size: 20px;</div><div class="line">		display: block;</div><div class="line">		margin: 0 auto 30px;</div><div class="line">		text-align: center;</div><div class="line">		line-height: 40px;</div><div class="line">		color: gold;</div><div class="line">		border: none;</div><div class="line">	&#125;</div><div class="line">	.loading&#123;</div><div class="line">		width: 400px;</div><div class="line">		height: 60px;</div><div class="line">		background-color: white;</div><div class="line">		margin: 0 auto;</div><div class="line">		line-height: 60px;</div><div class="line">		color: #666;</div><div class="line">		text-align: center;</div><div class="line">		font-size: 30px;</div><div class="line">	&#125;</div><div class="line">	.case&#123;</div><div class="line">		display: none;</div><div class="line">	&#125;</div><div class="line">	.case&#123;</div><div class="line">		width: 300px;</div><div class="line">		height: 60px;</div><div class="line">		background-color: white;</div><div class="line">		margin: 0 auto;</div><div class="line">	&#125;</div><div class="line">	.case ul&#123;</div><div class="line">		left: 20px;</div><div class="line">		position: absolute;</div><div class="line">		list-style: none;</div><div class="line">		width: 260px;</div><div class="line">	&#125;</div><div class="line">	.case ol&#123;</div><div class="line">		list-style: none;</div><div class="line">		width: 50px;</div><div class="line">		float: right;</div><div class="line">	&#125;</div><div class="line">	.case ol li&#123;</div><div class="line">		width: 30px;</div><div class="line">		height: 30px;</div><div class="line">		border-radius: 50%;</div><div class="line">		color: white;</div><div class="line">		background-color: blue;</div><div class="line">		line-height: 30px;</div><div class="line">		text-align: center;</div><div class="line">	&#125;</div><div class="line">	.case ul li&#123;</div><div class="line">		width: 30px;</div><div class="line">		height: 30px;</div><div class="line">		border-radius: 50%;</div><div class="line">		color: white;</div><div class="line">		background-color: red;</div><div class="line">		float: left;</div><div class="line">		margin: 0 3px;</div><div class="line">		line-height: 30px;</div><div class="line">		text-align: center;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">	var btn = document.querySelector(&quot;.btn&quot;);		</div><div class="line">	btn.onclick = function()&#123;</div><div class="line">		var redNum = 6;</div><div class="line">		var blueNum = 1;</div><div class="line">		var redList = [];</div><div class="line">		var blueList = [];</div><div class="line">		var redHtml = &quot;&quot;;</div><div class="line">		var blueHtml = &quot;&quot;;</div><div class="line">		var loading = document.querySelector(&quot;.loading&quot;);</div><div class="line">		var ca = document.querySelector(&quot;.case&quot;);</div><div class="line">		loading.style.display = &quot;none&quot;;</div><div class="line">		ca.style.display = &quot;block&quot;;</div><div class="line">		for (var i = 0;i&lt;redNum;i++) &#123;</div><div class="line">			redList.push(random(1,33));</div><div class="line">		&#125;</div><div class="line">		for (var j = 0;j&lt;blueNum;j++) &#123;</div><div class="line">			blueList.push(random(1,16));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		for (var h = 0;h&lt;redList.length;h++) &#123;</div><div class="line">			if (redList[h]&lt; 10) &#123;</div><div class="line">				redHtml +=&quot;&lt;li&gt;0&quot;+redList[h]+&quot;&lt;/li&gt;&quot;;</div><div class="line">			&#125;else&#123;</div><div class="line">				redHtml +=&quot;&lt;li&gt;&quot;+redList[h]+&quot;&lt;/li&gt;&quot;;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		if (blueList[0]&lt; 10) &#123;</div><div class="line">			blueHtml +=&quot;&lt;li&gt;0&quot;+blueList[0]+&quot;&lt;/li&gt;&quot;;</div><div class="line">		&#125;else&#123;</div><div class="line">			blueHtml +=&quot;&lt;li&gt;&quot;+blueList[0]+&quot;&lt;/li&gt;&quot;;</div><div class="line">		&#125;</div><div class="line">		document.querySelector(&quot;.case ul&quot;).innerHTML = redHtml;</div><div class="line">		document.querySelector(&quot;.case ol&quot;).innerHTML = blueHtml;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	function random(m,n) &#123;</div><div class="line">		var num = Math.max(m,n) - Math.min(m,n);</div><div class="line">		return Math.round(Math.random()*num+Math.min(m,n));</div><div class="line">	&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>canvas绘制熊本熊</title>
    <link href="http://yoursite.com/2016/10/26/canvasXiong/"/>
    <id>http://yoursite.com/2016/10/26/canvasXiong/</id>
    <published>2016-10-26T06:36:27.000Z</published>
    <updated>2016-11-26T07:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="从网上看到一个用canvas绘制的熊本熊"><a href="#从网上看到一个用canvas绘制的熊本熊" class="headerlink" title="从网上看到一个用canvas绘制的熊本熊"></a>从网上看到一个用canvas绘制的熊本熊</h3><p><img src="http://cdn.saymagic.cn/o_1aqq369m11jrs4o4g3o7pe10119.png" alt="o_1aqq369m11jrs4o4g3o7pe10119.png"></p>
<h2 id="HTML-amp-CSS"><a href="#HTML-amp-CSS" class="headerlink" title="HTML &amp; CSS"></a>HTML &amp; CSS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">	&lt;!-- html文件 --&gt;</div><div class="line">&lt;canvas class=&quot;kumamon&quot; id=&quot;kumamon&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;kumamon</div></pre></td></tr></table></figure>
<p><br>    为了清楚地看到画布位置，我们来给画布加个黑色边框：<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/*css文件*/</div><div class="line">.kumamon&#123;</div><div class="line">    border: 1px solid #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br>    画整幅图的函数：<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function drawKumamon() &#123;</div><div class="line">    var ku = document.getElementById(&quot;kumamon&quot;);</div><div class="line">    if (ku.getContext) &#123;</div><div class="line">        var ctx = ku.getContext(&quot;2d&quot;);</div><div class="line">        //绘图代码</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br>    文档加载后绘图（防止<code>getElementById()</code>取到空值）：<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">window.onload = function() &#123;</div><div class="line">    drawKumamon();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br>    跨浏览器的事件监听方法（本例中只会用到 addHandler）：<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var EventUtil = &#123;</div><div class="line">    addHandler: function(ele, type, handler) &#123;</div><div class="line">        if (ele.addEventListener) &#123;</div><div class="line">            ele.addEventListener(type, handler, false);</div><div class="line">        &#125; else if (ele.attachEvent) &#123;</div><div class="line">            ele.attachEvent(&quot;on&quot; + type, handler);</div><div class="line">        &#125; else &#123;</div><div class="line">            ele[&quot;on&quot; + type] = handler;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    removeHandler: function(ele, type, handler) &#123;</div><div class="line">        if (ele.removeEventListener) &#123;</div><div class="line">            ele.removeEventListener(type, handler, false);</div><div class="line">        &#125; else if (ele.detachEvent) &#123;</div><div class="line">            ele.detachEvent(&quot;on&quot; + type, handler);</div><div class="line">        &#125; else &#123;</div><div class="line">            ele[&quot;on&quot; + type] = null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><br>    为了让接下来的白色圈等效果更加明显，我们先涂背景。这里背景用纯色，暂定为深红色，颜色值为<code>rgb(174,0,0)</code>。<br><br>我们把制作背景色的代码封装成一个函数，然后在主函数中调用。这类工具绘图类函数我们以 paintXXX 命名。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function paintBackground(ctx, sColor) &#123;</div><div class="line">    v_color = sColor;</div><div class="line">    ctx.fillStyle = sColor;</div><div class="line">    ctx.fillRect(0, 0, 500, 500);</div><div class="line">&#125;</div><div class="line">var v_color = &quot;rgb(174,0,0)&quot;;</div></pre></td></tr></table></figure>
<p><br>    在主函数<code>drawKumamon()</code>中调用：<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">paintBackground(ctx, v_color);</div></pre></td></tr></table></figure>
<p><br>    熊本住在一个白色的圆圈里，它脸上的腮红也是圆圈。所以同样的，我们把画圆的代码封装成一个函数。<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function paintCircle(ctx, x, y, r, i, sColor) &#123;</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(x - r, y);</div><div class="line">    ctx.arc(x, y, r, 0, i * Math.PI, false);</div><div class="line">    ctx.fillStyle = sColor;</div><div class="line">    ctx.fill();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br>    在主函数中调用：<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">paintCircle(ctx, 250, 224, 191, 2, &quot;#fff&quot;);</div></pre></td></tr></table></figure>
<p><br>    这样，就在画布中间偏上的位置上有一个住着熊本熊的圆了。<br></p>

<h2 id="耳朵"><a href="#耳朵" class="headerlink" title="耳朵"></a>耳朵</h2><p><br>    熊本熊的两只耳朵就是黑色圆上面画一个小一点的白色圆。这两个圆的圆心是同一点。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//左耳朵</div><div class="line">paintCircle(ctx, 138, 120, 28, 2, &quot;#000&quot;);</div><div class="line">paintCircle(ctx, 138, 120, 15, 2, &quot;#fff&quot;);</div><div class="line">//右耳朵</div><div class="line">paintCircle(ctx, 365, 120, 28, 2, &quot;#000&quot;);</div><div class="line">paintCircle(ctx, 365, 120, 15, 2, &quot;#fff&quot;);</div></pre></td></tr></table></figure><br><br>## 脸<br><p><br>    熊本熊的脸是个椭圆。我们先来建一个绘制椭圆的工具函数。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function paintOval(ctx, x, y, a, b, i, sColor) &#123;</div><div class="line">    ctx.save();</div><div class="line">    var r = (a &gt; b) ? a : b;</div><div class="line">    var ratioX = a / r;</div><div class="line">    var ratioY = b / r;</div><div class="line">    ctx.scale(ratioX, ratioY);</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.arc(x / ratioX, y / ratioY, r, 0, i * Math.PI, false);</div><div class="line">    ctx.closePath();</div><div class="line">    ctx.restore();</div><div class="line">    ctx.fillStyle = sColor;</div><div class="line">    ctx.fill();</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br><p><br>    参数中的<code>(x,y)</code>组成了椭圆中心点的坐标，a，b 是椭圆的长短半径。i 的值为2时可以画出椭圆；sColor 是为椭圆上色的颜色的字符串表示。<br><br>    像这样调用：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">paintOval(ctx, 250, 210, 140, 118, 2, &quot;#000&quot;);</div></pre></td></tr></table></figure><br><br>## 眉毛<br><p><br>    眉毛是两条起末点直线距离（称为底边）相同，弧线最高点到底边的距离不同的二次贝塞尔曲线构成的封闭图形。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function bearEyebrow(ctx, h1, h2, x0, y0, y1, d, sColor) &#123;</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(x0, y0);</div><div class="line">    var x1 = x0 + d;</div><div class="line">    var cp1x = x0 + d / 2;</div><div class="line">    var cp1y = y0 - h1;</div><div class="line">    var cp2y = y0 - h2;</div><div class="line">    ctx.quadraticCurveTo(cp1x, cp1y, x1, y1);</div><div class="line">    ctx.quadraticCurveTo(cp1x, cp2y, x0, y0);</div><div class="line">    ctx.fillStyle = sColor;</div><div class="line">    ctx.fill();</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br><p><br>    调用:<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bearEyebrow(ctx, 20, 10, 168, 133, 130, 32, &quot;#fff&quot;);</div><div class="line">bearEyebrow(ctx, 20, 10, 298, 130, 133, 32, &quot;#fff&quot;);</div></pre></td></tr></table></figure><br><br><p><br>    因为眉毛宽度和位置不一样显得俏皮一点，所以传入的参数没有设置成对称的。<br></p>

<h2 id="眼睛"><a href="#眼睛" class="headerlink" title="眼睛"></a>眼睛</h2><p><br>    眼黑、眼白都是立起来的椭圆。需要写一个旋转椭圆的函数。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function paintRotatedOval(ctx, x, y, a, b, i, sColor, ang) &#123;</div><div class="line">    ctx.save();</div><div class="line">    var r = (a &gt; b) ? a : b;</div><div class="line">    var ratioX = a / r;</div><div class="line">    var ratioY = b / r;</div><div class="line">    ctx.translate(x / ratioX, y / ratioY);</div><div class="line">    ctx.rotate(ang * Math.PI / 180);</div><div class="line">    ctx.scale(ratioX, ratioY);</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.arc(0, 0, r, 0, i * Math.PI, false);</div><div class="line">    ctx.closePath();</div><div class="line">    ctx.restore();</div><div class="line">    ctx.fillStyle = sColor;</div><div class="line">    ctx.fill();</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br><p><br>    ↑↑ 最后一个参数是椭圆旋转角度。<br><br>    调用：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//左眼</div><div class="line">ctx.moveTo(160, 170);</div><div class="line">paintRotatedOval(ctx, 186, 170, 26, 27, 2, &quot;#fff&quot;, 90);</div><div class="line">ctx.moveTo(182, 170);</div><div class="line">paintOval(ctx, 192, 170, 4, 10, 2, &quot;#000&quot;);</div><div class="line">//右眼</div><div class="line">ctx.moveTo(273, 170);</div><div class="line">paintRotatedOval(ctx, 300, 170, 26, 27, 2, &quot;#fff&quot;, 90);</div><div class="line">ctx.moveTo(308, 170);</div><div class="line">paintOval(ctx, 312, 170, 4, 10, 2, &quot;#000&quot;);</div></pre></td></tr></table></figure><br><br>## 嘴<br><p><br>    嘴的部分有椭圆形的白色区域和黑色的两条闭合的二次贝塞尔曲线组成的嘴巴。<br><br>    给被二次贝塞尔围成的闭合区域着色：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function paintQuadratic(ctx, cpy, x0, y0, d, sColor) &#123;</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(x0, y0);</div><div class="line">    var x1 = x0 + d;</div><div class="line">    var cpx = x0 + d / 2;</div><div class="line">    ctx.quadraticCurveTo(cpx, cpy, x1, y0);</div><div class="line">    ctx.closePath();</div><div class="line">    ctx.fillStyle = sColor;</div><div class="line">    ctx.fill();</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br><p><br>    调用：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//嘴区域</div><div class="line">ctx.moveTo(186, 243);</div><div class="line">paintOval(ctx, 251, 243, 65, 52, 2, &quot;#fff&quot;);</div><div class="line">//嘴</div><div class="line">paintQuadratic(ctx, 240, 196, 253, 110, &quot;#000&quot;);</div><div class="line">paintQuadratic(ctx, 290, 196, 253, 110, &quot;#000&quot;);</div></pre></td></tr></table></figure><br><br>## 鼻子<br><p><br>    鼻子能拆成两半，是短半径不同的半椭圆。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//鼻子</div><div class="line">ctx.moveTo(228, 217);</div><div class="line">paintOval(ctx, 248, 217, 20, 17, 1, &quot;#000&quot;);</div><div class="line">ctx.moveTo(228, 142);</div><div class="line">paintRotatedOval(ctx, 248, 142, 20, 13, 1, &quot;#000&quot;, 180);</div></pre></td></tr></table></figure><br><br>## 腮红<br><p><br>    腮红是红色的圆。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//腮红</div><div class="line">ctx.moveTo(99, 227);</div><div class="line">paintCircle(ctx, 133, 227, 34, 2, &quot;rgb(255,0,2)&quot;);</div><div class="line">paintCircle(ctx, 366, 227, 34, 2, &quot;rgb(255,0,2)&quot;);</div></pre></td></tr></table></figure><br><br>## 身体<br><p><br>    为了让熊本熊头和身体的线条有所区别，身体的构造采用直线。<br><br>    在下巴的地方放一个矩形，营造一点熊本熊（也许有）的短脖子的感觉，然后矩形下面放一个上底和矩形长相同长度的等腰梯形。<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function bearBody(ctx, x0, y0, rectW, rectH, trapW, trapH, sColor) &#123;</div><div class="line">    var x1 = x0 - (trapW - rectW) / 2;</div><div class="line">    var y1 = y0 + rectH + trapH;</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.moveTo(x0, y0 + rectH);</div><div class="line">    ctx.lineTo(x1, y1);</div><div class="line">    ctx.lineTo(x1 + trapW, y1);</div><div class="line">    ctx.lineTo(x0 + rectW, y0 + rectH);</div><div class="line">    ctx.closePath();</div><div class="line">    ctx.fillStyle = sColor;</div><div class="line">    ctx.globalCompositeOperation = &quot;source-atop&quot;;</div><div class="line">    ctx.fill();</div><div class="line">    ctx.moveTo(x0, y0);</div><div class="line">    ctx.lineTo(x0 + rectW, y0);</div><div class="line">    ctx.lineTo(x0 + rectW, y0 + rectH);</div><div class="line">    ctx.lineTo(x0, y0 + rectH);</div><div class="line">    ctx.lineTo(x0, y0);</div><div class="line">    ctx.fill();</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br><p><br>    调用：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bearBody(ctx, 128, 241, 245, 40, 334, 140, &quot;#000&quot;);</div></pre></td></tr></table></figure><br><br>## 文字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function paintText(ctx, txt,sColor) &#123;</div><div class="line">    inTxt = txt;</div><div class="line">    sColor = txtColor;</div><div class="line">    ctx.font = &quot;bold 36px Arial&quot;;</div><div class="line">    ctx.textAlign = &quot;center&quot;;</div><div class="line">    ctx.textBaseLine = &quot;middle&quot;;</div><div class="line">    ctx.fillStyle = sColor;</div><div class="line">    ctx.fillText(txt, 250, 462);</div><div class="line">&#125;</div><div class="line">var inTxt = &quot;你为什么不学习？！&quot;;</div><div class="line">var txtColor = &quot;#fff&quot;;</div></pre></td></tr></table></figure><br><br><p><br>    调用：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">paintText(ctx, inTxt,txtColor);</div></pre></td></tr></table></figure><br><br><p><br>    因为之前调用 bearBody 函数时改变过 globalCompositeOperation 为source-atop，也就是说画布上新的绘制将在目标图像顶部显示源图像。源图像位于目标图像之外的部分是不可见的。因为画布上先画的熊本熊待着的那个白色圆圈，所以圆圈以外的部分是不可见的。想看到文字，要在调用 paintText 前先更改 globalCompositeOperation 值为source-over。<br></p>

<h2 id="drawKumamon-js"><a href="#drawKumamon-js" class="headerlink" title="drawKumamon.js"></a>drawKumamon.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div></pre></td><td class="code"><pre><div class="line">function drawKumamon() &#123;</div><div class="line">    var ku = document.getElementById(&quot;kumamon&quot;);</div><div class="line">    if (ku.getContext) &#123;</div><div class="line">        var ctx = ku.getContext(&quot;2d&quot;);</div><div class="line">        //绘图代码</div><div class="line">        paintCircle(ctx, 250, 224, 191, 2, &quot;#fff&quot;);</div><div class="line">        bearBody(ctx, 128, 241, 245, 40, 334, 140, &quot;#000&quot;);</div><div class="line">        //左耳朵</div><div class="line">        paintCircle(ctx, 138, 120, 28, 2, &quot;#000&quot;);</div><div class="line">        paintCircle(ctx, 138, 120, 15, 2, &quot;#fff&quot;);</div><div class="line">        //右耳朵</div><div class="line">        paintCircle(ctx, 365, 120, 28, 2, &quot;#000&quot;);</div><div class="line">        paintCircle(ctx, 365, 120, 15, 2, &quot;#fff&quot;);</div><div class="line">        //脸</div><div class="line">        paintOval(ctx, 250, 210, 140, 118, 2, &quot;#000&quot;);</div><div class="line">        //眉毛</div><div class="line">        bearEyebrow(ctx, 20, 10, 168, 133, 130, 32, &quot;#fff&quot;);</div><div class="line">        bearEyebrow(ctx, 20, 10, 298, 130, 133, 32, &quot;#fff&quot;);</div><div class="line">        //左眼</div><div class="line">        ctx.moveTo(160, 170);</div><div class="line">        paintRotatedOval(ctx, 186, 170, 26, 27, 2, &quot;#fff&quot;, 90);</div><div class="line">        ctx.moveTo(182, 170);</div><div class="line">        paintOval(ctx, 192, 170, 4, 10, 2, &quot;#000&quot;);</div><div class="line">        //右眼</div><div class="line">        ctx.moveTo(273, 170);</div><div class="line">        paintRotatedOval(ctx, 300, 170, 26, 27, 2, &quot;#fff&quot;, 90);</div><div class="line">        ctx.moveTo(308, 170);</div><div class="line">        paintOval(ctx, 312, 170, 4, 10, 2, &quot;#000&quot;);</div><div class="line">        //嘴区域</div><div class="line">        ctx.moveTo(186, 243);</div><div class="line">        paintOval(ctx, 251, 243, 65, 52, 2, &quot;#fff&quot;);</div><div class="line">        //嘴</div><div class="line">        paintQuadratic(ctx, 240, 196, 253, 110, &quot;#000&quot;);</div><div class="line">        paintQuadratic(ctx, 290, 196, 253, 110, &quot;#000&quot;);</div><div class="line">        //鼻子</div><div class="line">        ctx.moveTo(228, 217);</div><div class="line">        paintOval(ctx, 248, 217, 20, 17, 1, &quot;#000&quot;);</div><div class="line">        ctx.moveTo(228, 142);</div><div class="line">        paintRotatedOval(ctx, 248, 142, 20, 13, 1, &quot;#000&quot;, 180);</div><div class="line">        //腮红</div><div class="line">        ctx.moveTo(99, 227);</div><div class="line">        paintCircle(ctx, 133, 227, 34, 2, &quot;rgb(255,0,2)&quot;);</div><div class="line">        paintCircle(ctx, 366, 227, 34, 2, &quot;rgb(255,0,2)&quot;);</div><div class="line">        //文字</div><div class="line">        ctx.globalCompositeOperation = &quot;source-over&quot;;</div><div class="line">        paintText(ctx, inTxt,txtColor);</div><div class="line">        paintBackground(ctx, v_color);</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    function paintBackground(ctx, sColor) &#123;</div><div class="line">        v_color = sColor;</div><div class="line">        ctx.globalCompositeOperation = &quot;destination-over&quot;;</div><div class="line">        ctx.fillStyle = sColor;</div><div class="line">        ctx.fillRect(0, 0, 500, 500);</div><div class="line">    &#125;</div><div class="line">    function paintCircle(ctx, x, y, r, i, sColor) &#123;</div><div class="line">        ctx.beginPath();</div><div class="line">        ctx.moveTo(x - r, y);</div><div class="line">        ctx.arc(x, y, r, 0, i * Math.PI, false);</div><div class="line">        ctx.fillStyle = sColor;</div><div class="line">        ctx.fill();</div><div class="line">    &#125;</div><div class="line">    function paintOval(ctx, x, y, a, b, i, sColor) &#123;</div><div class="line">        ctx.save();</div><div class="line">        var r = (a &gt; b) ? a : b;</div><div class="line">        var ratioX = a / r;</div><div class="line">        var ratioY = b / r;</div><div class="line">        ctx.scale(ratioX, ratioY);</div><div class="line">        ctx.beginPath();</div><div class="line">        ctx.arc(x / ratioX, y / ratioY, r, 0, i * Math.PI, false);</div><div class="line">        ctx.closePath();</div><div class="line">        ctx.restore();</div><div class="line">        ctx.fillStyle = sColor;</div><div class="line">        ctx.fill();</div><div class="line">    &#125;</div><div class="line">    function bearEyebrow(ctx, h1, h2, x0, y0, y1, d, sColor) &#123;</div><div class="line">        ctx.beginPath();</div><div class="line">        ctx.moveTo(x0, y0);</div><div class="line">        var x1 = x0 + d;</div><div class="line">        var cp1x = x0 + d / 2;</div><div class="line">        var cp1y = y0 - h1;</div><div class="line">        var cp2y = y0 - h2;</div><div class="line">        ctx.quadraticCurveTo(cp1x, cp1y, x1, y1);</div><div class="line">        ctx.quadraticCurveTo(cp1x, cp2y, x0, y0);</div><div class="line">        ctx.fillStyle = sColor;</div><div class="line">        ctx.fill();</div><div class="line">    &#125;</div><div class="line">    function paintRotatedOval(ctx, x, y, a, b, i, sColor, ang) &#123;</div><div class="line">        ctx.save();</div><div class="line">        var r = (a &gt; b) ? a : b;</div><div class="line">        var ratioX = a / r;</div><div class="line">        var ratioY = b / r;</div><div class="line">        ctx.translate(x / ratioX, y / ratioY);</div><div class="line">        ctx.rotate(ang * Math.PI / 180);</div><div class="line">        ctx.scale(ratioX, ratioY);</div><div class="line">        ctx.beginPath();</div><div class="line">        ctx.arc(0, 0, r, 0, i * Math.PI, false);</div><div class="line">        ctx.closePath();</div><div class="line">        ctx.restore();</div><div class="line">        ctx.fillStyle = sColor;</div><div class="line">        ctx.fill();</div><div class="line">    &#125;</div><div class="line">    function paintQuadratic(ctx, cpy, x0, y0, d, sColor) &#123;</div><div class="line">        ctx.beginPath();</div><div class="line">        ctx.moveTo(x0, y0);</div><div class="line">        var x1 = x0 + d;</div><div class="line">        var cpx = x0 + d / 2;</div><div class="line">        ctx.quadraticCurveTo(cpx, cpy, x1, y0);</div><div class="line">        ctx.closePath();</div><div class="line">        ctx.fillStyle = sColor;</div><div class="line">        ctx.fill();</div><div class="line">    &#125;</div><div class="line">    function bearBody(ctx, x0, y0, rectW, rectH, trapW, trapH, sColor) &#123;</div><div class="line">        var x1 = x0 - (trapW - rectW) / 2;</div><div class="line">        var y1 = y0 + rectH + trapH;</div><div class="line">        ctx.beginPath();</div><div class="line">        ctx.moveTo(x0, y0 + rectH);</div><div class="line">        ctx.lineTo(x1, y1);</div><div class="line">        ctx.lineTo(x1 + trapW, y1);</div><div class="line">        ctx.lineTo(x0 + rectW, y0 + rectH);</div><div class="line">        ctx.closePath();</div><div class="line">        ctx.fillStyle = sColor;</div><div class="line">        ctx.globalCompositeOperation = &quot;source-atop&quot;;</div><div class="line">        ctx.fill();</div><div class="line">        ctx.moveTo(x0, y0);</div><div class="line">        ctx.lineTo(x0 + rectW, y0);</div><div class="line">        ctx.lineTo(x0 + rectW, y0 + rectH);</div><div class="line">        ctx.lineTo(x0, y0 + rectH);</div><div class="line">        ctx.lineTo(x0, y0);</div><div class="line">        ctx.fill();</div><div class="line">    &#125;</div><div class="line">    function paintText(ctx, txt,sColor) &#123;</div><div class="line">        inTxt = txt;</div><div class="line">        sColor = txtColor;</div><div class="line">        ctx.font = &quot;bold 36px Arial&quot;;</div><div class="line">        ctx.textAlign = &quot;center&quot;;</div><div class="line">        ctx.textBaseLine = &quot;middle&quot;;</div><div class="line">        ctx.fillStyle = sColor;</div><div class="line">        ctx.fillText(txt, 250, 462);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    var v_color = &quot;rgb(174,0,0)&quot;;</div><div class="line">    var inTxt = &quot;你为什么不学习？！&quot;;</div><div class="line">    var txtColor = &quot;#fff&quot;;</div><div class="line">    window.onload = function() &#123;</div><div class="line">        drawKumamon();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>原文地址：<a href="http://blog.ilanyy.com/html5/draw-kumamon-by-canvas.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://blog.ilanyy.com/html5/draw-kumamon-by-canvas.html?utm_source=tuicool&amp;utm_medium=referral</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;从网上看到一个用canvas绘制的熊本熊&quot;&gt;&lt;a href=&quot;#从网上看到一个用canvas绘制的熊本熊&quot; class=&quot;headerlink&quot; title=&quot;从网上看到一个用canvas绘制的熊本熊&quot;&gt;&lt;/a&gt;从网上看到一个用canvas绘制的熊本熊&lt;/h3&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一道常被人轻视的前端JS面试题</title>
    <link href="http://yoursite.com/2016/10/25/jsmianshi/"/>
    <id>http://yoursite.com/2016/10/25/jsmianshi/</id>
    <published>2016-10-25T12:49:36.000Z</published>
    <updated>2016-11-25T13:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目如下："><a href="#题目如下：" class="headerlink" title="题目如下："></a>题目如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function Foo() &#123;</div><div class="line">    getName = function () &#123; alert (1); &#125;;</div><div class="line">    return this;</div><div class="line">&#125;</div><div class="line">Foo.getName = function () &#123; alert (2);&#125;;</div><div class="line">Foo.prototype.getName = function () &#123; alert (3);&#125;;</div><div class="line">var getName = function () &#123; alert (4);&#125;;</div><div class="line">function getName() &#123; alert (5);&#125;</div><div class="line"></div><div class="line">//请写出以下输出结果：</div><div class="line">Foo.getName();</div><div class="line">getName();</div><div class="line">Foo().getName();</div><div class="line">getName();</div><div class="line">new Foo.getName();</div><div class="line">new Foo().getName();</div><div class="line">new new Foo().getName();</div></pre></td></tr></table></figure>
<h3 id="答案是："><a href="#答案是：" class="headerlink" title="答案是："></a>答案是：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function Foo() &#123;</div><div class="line">    getName = function () &#123; alert (1); &#125;;</div><div class="line">    return this;</div><div class="line">&#125;</div><div class="line">Foo.getName = function () &#123; alert (2);&#125;;</div><div class="line">Foo.prototype.getName = function () &#123; alert (3);&#125;;</div><div class="line">var getName = function () &#123; alert (4);&#125;;</div><div class="line">function getName() &#123; alert (5);&#125;</div><div class="line"></div><div class="line">//答案：</div><div class="line">Foo.getName();//2</div><div class="line">getName();//4</div><div class="line">Foo().getName();//1</div><div class="line">getName();//1</div><div class="line">new Foo.getName();//2</div><div class="line">new Foo().getName();//3</div><div class="line">new new Foo().getName();//3</div></pre></td></tr></table></figure>
<p><br>    此题是我综合之前的开发经验以及遇到的JS各种坑汇集而成。此题涉及的知识点众多，包括变量定义提升、this指针指向、运算符优先级、原型、继承、全局变量污染、对象属性及原型属性优先级等等。<br>此题包含7小问，分别说下。<br></p>

<h2 id="第一问"><a href="#第一问" class="headerlink" title="第一问:"></a>第一问:</h2><p><br>    先看此题的上半部分做了什么，首先定义了一个叫Foo的函数，之后为Foo创建了一个叫getName的静态属性存储了一个匿名函数，之后为Foo的原型对象新创建了一个叫getName的匿名函数。之后又通过函数变量表达式创建了一个getName的函数，最后再声明一个叫getName函数。<br><br>第一问的 <code>Foo.getName</code> 自然是访问Foo函数上存储的静态属性，自然是2，没什么可说的。<br></p>

<h2 id="第二问"><a href="#第二问" class="headerlink" title="第二问:"></a>第二问:</h2><p><br>    第二问，直接调用 getName 函数。既然是直接调用那么就是访问当前上文作用域内的叫<code>getName</code>的函数，所以跟1 2 3都没什么关系。此题有无数面试者回答为5。此处有两个坑，一是变量声明提升，二是函数表达式。<br></p>

<h3 id="变量声明提升"><a href="#变量声明提升" class="headerlink" title="变量声明提升"></a>变量声明提升</h3><p><br>即所有声明变量或声明函数都会被提升到当前函数的顶部。<br><br>例如下代码:<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;x&apos; in window);//true</div><div class="line">var x;</div><div class="line">x = 0;</div></pre></td></tr></table></figure>
<p><br>    代码执行时js引擎会将声明语句提升至代码最上方，变为：<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var x;</div><div class="line">console.log(&apos;x&apos; in window);//true</div><div class="line">x = 0;</div></pre></td></tr></table></figure>
<h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p><br>     <code>var getName</code>与 <code>function getName</code> 都是声明语句，区别在于 <code>var getName</code>是函数表达式，而 <code>function getName</code> 是函数声明。关于JS中的各种函数创建方式可以看<a href="http://www.cnblogs.com/xxcanghai/p/4991870.html" target="_blank" rel="external">大部分人都会做错的经典JS闭包面试题</a>这篇文章有详细说明。<br><br>函数表达式最大的问题，在于js会将此代码拆分为两行代码分别执行。<br><br>例如下代码：<br></p>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">console.log(x);//输出：function x()&#123;&#125;</div><div class="line">var x=1;</div><div class="line">function x()&#123;&#125;</div></pre></td></tr></table></figure>
<p><br>    实际执行的代码为，先将 <code>var x=1</code> 拆分为 <code>var x;</code> 和 <code>x = 1;</code> 两行，再将 <code>var x;</code> 和 <code>function x(){}</code>两行提升至最上方变成：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var x;</div><div class="line">function x()&#123;&#125;</div><div class="line">console.log(x);</div><div class="line">x=1;</div></pre></td></tr></table></figure><br><br><p><br>    所以最终函数声明的x覆盖了变量声明的x，log输出为x函数。<br><br>同理，原题中代码最终执行时的是：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function Foo() &#123;</div><div class="line">    getName = function () &#123; alert (1); &#125;;</div><div class="line">    return this;</div><div class="line">&#125;</div><div class="line">var getName;//只提升变量声明</div><div class="line">function getName() &#123; alert (5);&#125;//提升函数声明，覆盖var的声明</div><div class="line"></div><div class="line">Foo.getName = function () &#123; alert (2);&#125;;</div><div class="line">Foo.prototype.getName = function () &#123; alert (3);&#125;;</div><div class="line">getName = function () &#123; alert (4);&#125;;//最终的赋值再次覆盖function getName声明</div><div class="line"></div><div class="line">getName();//最终输出4</div></pre></td></tr></table></figure><br><br>## 第三问<br><br><p><br>    第三问的 <code>Foo().getName();</code> 先执行了Foo函数，然后调用Foo函数的返回值对象的getName属性函数。<br><br>Foo函数的第一句 <code>getName = function () { alert (1); };</code> 是一句函数赋值语句，注意它没有var声明，所以先向当前Foo函数作用域内寻找getName变量，没有。再向当前函数作用域上层，即外层作用域内寻找是否含有getName变量，找到了，也就是第二问中的alert(4)函数，将此变量的值赋值为 <code>function(){alert(1)}</code>。<br><br>此处实际上是将外层作用域内的getName函数修改了。<br></p><br><p>此处实际上是将外层作用域内的getName函数修改了。</p>

<h4 id="注意：此处若依然没有找到会一直向上查找到window对象，若window对象中也没有getName属性，就在window对象中创建一个getName变量。"><a href="#注意：此处若依然没有找到会一直向上查找到window对象，若window对象中也没有getName属性，就在window对象中创建一个getName变量。" class="headerlink" title="注意：此处若依然没有找到会一直向上查找到window对象，若window对象中也没有getName属性，就在window对象中创建一个getName变量。"></a>注意：此处若依然没有找到会一直向上查找到window对象，若window对象中也没有getName属性，就在window对象中创建一个getName变量。</h4><p><br>    之后Foo函数的返回值是this，而JS的this问题博客园中已经有非常多的文章介绍，这里不再多说。<br><br>简单的讲，this的指向是由所在函数的调用方式决定的。而此处的直接调用方式，this指向window对象。<br><br>遂Foo函数返回的是window对象，相当于执行 <code>window.getName()</code>，而window中的getName已经被修改为alert(1)，所以最终会输出1<br><br>此处考察了两个知识点，一个是变量作用域问题，一个是this指向问题。<br></p>

<h2 id="第四问"><a href="#第四问" class="headerlink" title="第四问"></a>第四问</h2><p>直接调用getName函数，相当于 <code>window.getName()</code> ，因为这个变量已经被Foo函数执行时修改了，遂结果与第三问相同，为1</p>

<h2 id="第五问"><a href="#第五问" class="headerlink" title="第五问"></a>第五问</h2><p><br>    第五问 <code>new Foo.getName();</code>,此处考察的是js的运算符优先级问题。<br></p>

<h3 id="js运算符优先级"><a href="#js运算符优先级" class="headerlink" title="js运算符优先级:"></a>js运算符优先级:</h3><p><img src="http://images2015.cnblogs.com/blog/746158/201602/746158-20160214172949325-418813184.png" alt="746158-20160214172949325-418813184"></p>
<h3 id="参考链接-https-developer-mozilla-org-zh-CN-docs-Web-JavaScript-Reference-Operators-Operator-Precedence"><a href="#参考链接-https-developer-mozilla-org-zh-CN-docs-Web-JavaScript-Reference-Operators-Operator-Precedence" class="headerlink" title="参考链接   https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence"></a>参考链接   <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</a></h3><p><br>    通过查上表可以得知点（.）的优先级高于new操作，遂相当于是:<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new (Foo.getName)();</div></pre></td></tr></table></figure><br><br><p><br>    所以实际上将getName函数作为了构造函数来执行，遂弹出2。<br></p>

<h2 id="第六问"><a href="#第六问" class="headerlink" title="第六问"></a>第六问</h2><p><br>    第六问 <code>new Foo().getName()</code> ，首先看运算符优先级括号高于new，实际执行为<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(new Foo()).getName()</div></pre></td></tr></table></figure><br><br><p><br>    遂先执行Foo函数，而Foo此时作为构造函数却有返回值，所以这里需要说明下js中的构造函数返回值问题。<br></p><br><p><br>    原题中，返回的是this，而this在构造函数中本来就代表当前实例化对象，遂最终Foo函数返回实例化对象。<br><br>之后调用实例化对象的getName函数，因为在Foo构造函数中没有为实例化对象添加任何属性，遂到当前对象的原型对象（prototype）中寻找getName，找到了。<br><br>遂最终输出3。<br></p>


<h2 id="第七问"><a href="#第七问" class="headerlink" title="第七问"></a>第七问</h2><p><br>    第七问, <code>new new Foo().getName();</code> 同样是运算符优先级问题。<br><br>最终实际执行为：<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new ((new Foo()).getName)();</div></pre></td></tr></table></figure><br><br><p><br>    先初始化Foo的实例化对象，然后将其原型上的getName函数作为构造函数再次new。<br><br>遂最终结果为3<br></p>


<p>转载自-&gt;<a href="http://www.cnblogs.com/xxcanghai/p/5189353.html" target="_blank" rel="external">http://www.cnblogs.com/xxcanghai/p/5189353.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目如下：&quot;&gt;&lt;a href=&quot;#题目如下：&quot; class=&quot;headerlink&quot; title=&quot;题目如下：&quot;&gt;&lt;/a&gt;题目如下：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript实现点击按钮复制指定区域文本</title>
    <link href="http://yoursite.com/2016/10/22/jsCopy/"/>
    <id>http://yoursite.com/2016/10/22/jsCopy/</id>
    <published>2016-10-22T11:20:58.000Z</published>
    <updated>2016-11-25T11:45:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>html5的webAPI接口可以很轻松的使用短短的几行代码就实现点击按钮复制区域文本的功能，不需要依赖flash。<br></p>

<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/* 创建range对象   */</div><div class="line">const range = document.createRange();</div><div class="line">range.selectNode(element);    // 设定range包含的节点对象 </div><div class="line"></div><div class="line">/* 窗口的selection对象，表示用户选择的文本 */</div><div class="line">const selection = window.getSelection();</div><div class="line">if(selection.rangeCount &gt; 0) selection.removeAllRanges(); // 将已经包含的已选择的对象清除掉</div><div class="line">selection.addRange(range);                                // 将要复制的区域的range对象添加到selection对象中</div><div class="line"></div><div class="line">document.execCommand(&apos;copy&apos;); // 执行copy命令，copy用户选择的文本</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试:"></a>测试:</h3><p>edge浏览器、Chrome（v54.0.2840.99 m）、Firefox（v49.0.1）可用。<br><br>IE9、IE10、IE11会弹出提示询问是否将文本粘贴到剪贴板上。<br><br>IE7、IE8不支持该功能。<br><br>IOS10的Safari浏览器可用。<br><br>根据反馈，IOS9以下的Safari浏览器应该是不支持该功能的。<br></p>

<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo:"></a>Demo:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;article id=&quot;article&quot;&gt;</div><div class="line">    &lt;h4&gt;公园一日游&lt;/h4&gt;</div><div class="line">    &lt;time&gt;2016.8.15 星期二&lt;/time&gt;</div><div class="line">    &lt;p&gt;今天风和日丽，我和小红去了人民公园，玩了滑梯、打雪仗、划船，真是愉快的一天啊。&lt;/p&gt;</div><div class="line">&lt;/article&gt;</div><div class="line">&lt;button id=&quot;copy&quot;&gt;复制文章&lt;/button&gt;</div><div class="line">&lt;textarea style=&quot;width: 500px;height: 100px;&quot; placeholder=&quot;试一试ctrl + v&quot;&gt;&lt;/textarea&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    function copyArticle(event)&#123;</div><div class="line">        const range = document.createRange();</div><div class="line">        range.selectNode(document.getElementById(&apos;article&apos;));</div><div class="line"></div><div class="line">        const selection = window.getSelection();</div><div class="line">        if(selection.rangeCount &gt; 0) selection.removeAllRanges();</div><div class="line">        selection.addRange(range);</div><div class="line">        </div><div class="line">        document.execCommand(&apos;copy&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    document.getElementById(&apos;copy&apos;).addEventListener(&apos;click&apos;, copyArticle, false);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>转载-&gt;<a href="https://zhuanlan.zhihu.com/p/23920249" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/23920249</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;html5的webAPI接口可以很轻松的使用短短的几行代码就实现点击按钮复制区域文本的功能，不需要依赖flash。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&quot;代码如下&quot;&gt;&lt;a href=&quot;#代码如下&quot; class=&quot;headerlink&quot; title=&quot;代码如下:&quot;&gt;&lt;/a&gt;代码如
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Javascript定义类（class）的三种方法</title>
    <link href="http://yoursite.com/2016/10/18/clss/"/>
    <id>http://yoursite.com/2016/10/18/clss/</id>
    <published>2016-10-18T11:57:46.000Z</published>
    <updated>2016-11-21T01:45:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>在面向对象编程中，类（class）是对象（object）的模板，定义了同一组对象（又称”实例”）共有的属性和方法。<br>Javascript语言不支持”类”，但是可以用一些变通的方法，模拟出”类”。<br>一、构造函数法<br>这是经典方法，也是教科书必教的方法。它用构造函数模拟”类”，在其内部用this关键字指代实例对象。<br>　　<figure class="highlight plain"><figcaption><span>Cat() &#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　　　　this.name = &quot;大毛&quot;;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>生成实例的时候，使用new关键字。<br>　　<figure class="highlight plain"><figcaption><span>cat1 = new Cat();</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　alert(cat1.name); // 大毛</div></pre></td></tr></table></figure></p>
<p>类的属性和方法，还可以定义在构造函数的prototype对象之上。<br>　　<figure class="highlight plain"><figcaption><span>= function()&#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　　　　alert(&quot;喵喵喵&quot;);</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>关于这种方法的详细介绍，请看我写的系列文章《Javascript 面向对象编程》，这里就不多说了。它的主要缺点是，比较复杂，用到了this和prototype，编写和阅读都很费力。<br>二、Object.create()法<br>为了解决”构造函数法”的缺点，更方便地生成对象，Javascript的国际标准ECMAScript第五版（目前通行的是第三版），提出了一个新的方法Object.create()。<br>用这个方法，”类”就是一个对象，不是函数。<br>　　<figure class="highlight plain"><figcaption><span>Cat = &#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　　　name: &quot;大毛&quot;,</div><div class="line">　　　　makeSound: function()&#123; alert(&quot;喵喵喵&quot;); &#125;</div><div class="line">　　&#125;;</div></pre></td></tr></table></figure></p>
<p>然后，直接用Object.create()生成实例，不需要用到new。<br>　　<figure class="highlight plain"><figcaption><span>cat1 = Object.create(Cat);</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　　alert(cat1.name); // 大毛</div><div class="line">　　cat1.makeSound(); // 喵喵喵</div></pre></td></tr></table></figure></p>
<p>目前，各大浏览器的最新版本（包括IE9）都部署了这个方法。如果遇到老式浏览器，可以用下面的代码自行部署。<br>　　<figure class="highlight plain"><figcaption><span>(!Object.create) &#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　　　　Object.create = function (o) &#123;</div><div class="line">　　　　　　 function F() &#123;&#125;</div><div class="line">　　　　　　F.prototype = o;</div><div class="line">　　　　　　return new F();</div><div class="line">　　　　&#125;;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<p>这种方法比”构造函数法”简单，但是不能实现私有属性和私有方法，实例对象之间也不能共享数据，对”类”的模拟不够全面。<br>三、极简主义法<br>荷兰程序员Gabor de Mooij提出了一种比Object.create()更好的新方法，他称这种方法为”极简主义法”（minimalist approach）。这也是我推荐的方法。<br>3.1 封装<br>这种方法不使用this和prototype，代码部署起来非常简单，这大概也是它被叫做”极简主义法”的原因。<br>首先，它也是用一个对象模拟”类”。在这个类里面，定义一个构造函数createNew()，用来生成实例。<br>　　<figure class="highlight plain"><figcaption><span>Cat = &#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　　　createNew: function()&#123;</div><div class="line">　　　　　　// some code here</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;</div></pre></td></tr></table></figure></p>
<p>然后，在createNew()里面，定义一个实例对象，把这个实例对象作为返回值。<br>　　<figure class="highlight plain"><figcaption><span>Cat = &#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">　　　　createNew: function()&#123;</div><div class="line">　　　　　　var cat = &#123;&#125;;</div><div class="line">　　　　　　cat.name = &quot;大毛&quot;;</div><div class="line">　　　　　　cat.makeSound = function()&#123; alert(&quot;喵喵喵&quot;); &#125;;</div><div class="line">　　　　　　return cat;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;</div></pre></td></tr></table></figure></p>
<p>使用的时候，调用createNew()方法，就可以得到实例对象。<br>　　<figure class="highlight plain"><figcaption><span>cat1 = Cat.createNew();</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　cat1.makeSound(); // 喵喵喵</div></pre></td></tr></table></figure></p>
<p>这种方法的好处是，容易理解，结构清晰优雅，符合传统的”面向对象编程”的构造，因此可以方便地部署下面的特性。<br>3.2 继承<br>让一个类继承另一个类，实现起来很方便。只要在前者的createNew()方法中，调用后者的createNew()方法即可。<br>先定义一个Animal类。<br>　　<figure class="highlight plain"><figcaption><span>Animal = &#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　　　　createNew: function()&#123;</div><div class="line">　　　　　　var animal = &#123;&#125;;</div><div class="line">　　　　　　animal.sleep = function()&#123; alert(&quot;睡懒觉&quot;); &#125;;</div><div class="line">　　　　　　return animal;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;</div></pre></td></tr></table></figure></p>
<p>然后，在Cat的createNew()方法中，调用Animal的createNew()方法。<br>　　<figure class="highlight plain"><figcaption><span>Cat = &#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">　　　　createNew: function()&#123;</div><div class="line">　　　　　　var cat = Animal.createNew();</div><div class="line">　　　　　　cat.name = &quot;大毛&quot;;</div><div class="line">　　　　　　cat.makeSound = function()&#123; alert(&quot;喵喵喵&quot;); &#125;;</div><div class="line">　　　　　　return cat;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;</div></pre></td></tr></table></figure></p>
<p>这样得到的Cat实例，就会同时继承Cat类和Animal类。<br>　　<figure class="highlight plain"><figcaption><span>cat1 = Cat.createNew();</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　cat1.sleep(); // 睡懒觉</div></pre></td></tr></table></figure></p>
<p>3.3 私有属性和私有方法<br>在createNew()方法中，只要不是定义在cat对象上的方法和属性，都是私有的。<br>　　<figure class="highlight plain"><figcaption><span>Cat = &#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">　　　　createNew: function()&#123;</div><div class="line">　　　　　　var cat = &#123;&#125;;</div><div class="line">　　　　　　var sound = &quot;喵喵喵&quot;;</div><div class="line">　　　　　　cat.makeSound = function()&#123; alert(sound); &#125;;</div><div class="line">　　　　　　return cat;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;</div></pre></td></tr></table></figure></p>
<p>上例的内部变量sound，外部无法读取，只有通过cat的公有方法makeSound()来读取。<br>　　<figure class="highlight plain"><figcaption><span>cat1 = Cat.createNew();</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　alert(cat1.sound); // undefined</div></pre></td></tr></table></figure></p>
<p>3.4 数据共享<br>有时候，我们需要所有实例对象，能够读写同一项内部数据。这个时候，只要把这个内部数据，封装在类对象的里面、createNew()方法的外面即可。<br>　　<figure class="highlight plain"><figcaption><span>Cat = &#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">　　　　sound : &quot;喵喵喵&quot;,</div><div class="line">　　　　createNew: function()&#123;</div><div class="line">　　　　　　var cat = &#123;&#125;;</div><div class="line">　　　　　　cat.makeSound = function()&#123; alert(Cat.sound); &#125;;</div><div class="line">　　　　　　cat.changeSound = function(x)&#123; Cat.sound = x; &#125;;</div><div class="line">　　　　　　return cat;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;;</div></pre></td></tr></table></figure></p>
<p>然后，生成两个实例对象：<br>　　<figure class="highlight plain"><figcaption><span>cat1 = Cat.createNew();</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　　var cat2 = Cat.createNew();</div><div class="line">　　cat1.makeSound(); // 喵喵喵</div></pre></td></tr></table></figure></p>
<p>这时，如果有一个实例对象，修改了共享的数据，另一个实例对象也会受到影响。<br>　　<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　cat1.makeSound(); // 啦啦啦</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在面向对象编程中，类（class）是对象（object）的模板，定义了同一组对象（又称”实例”）共有的属性和方法。&lt;br&gt;Javascript语言不支持”类”，但是可以用一些变通的方法，模拟出”类”。&lt;br&gt;一、构造函数法&lt;br&gt;这是经典方法，也是教科书必教的方法。它用构造
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>canvas动画时钟</title>
    <link href="http://yoursite.com/2016/10/15/canvasClock/"/>
    <id>http://yoursite.com/2016/10/15/canvasClock/</id>
    <published>2016-10-15T06:10:24.000Z</published>
    <updated>2016-11-21T01:34:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>开始用canvas实现这个逼格满满的时钟吧。在html代码中插入canvas标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;canvas&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;</div></pre></td></tr></table></figure></p>
<p>设置好css样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">html, body &#123;</div><div class="line">   width: 100%;</div><div class="line">   height: 100%;</div><div class="line">   margin: 0;</div><div class="line"> &#125;</div><div class="line"> canvas &#123;</div><div class="line">   border: 1px solid #eee;</div><div class="line">   position: relative;</div><div class="line">   left: 50%;</div><div class="line">   top: 50%;</div><div class="line">   transform: translate(-50%, -50%);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>在js文件中创建画布。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function clock() &#123;</div><div class="line">  var ctx = document.getElementById(&apos;canvas&apos;).getContext(&apos;2d&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先来绘制时钟表盘，我们看到这张图是带有光线阴影效果的，画成一样难度太高。于是就用颜色的渐变来让时钟看起来稍微立体一点。在canvas中用createLinearGradient来创建一个新的渐变，并用addColorStop上色，最后把颜色赋给strokeStyle。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//绘制表盘底色</div><div class="line">ctx.translate(200, 200); //将坐标原点移到画布中心</div><div class="line">ctx.rotate(-Math.PI/2); //将坐标轴逆时针旋转90度，x轴正方向对准12点方向</div><div class="line">var lingrad = ctx.createLinearGradient(150, 0, -150, 0);</div><div class="line">lingrad.addColorStop(0, &apos;#242f37&apos;);</div><div class="line">lingrad.addColorStop(1, &apos;#48585c&apos;);</div><div class="line">ctx.fillStyle = lingrad;</div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(0, 0, 150, 0, Math.PI * 2, true);</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure></p>
<p>比较关键的一点是画布的坐标轴x轴正方向是时钟3点钟方向，为了方便起见，我们把它逆时针旋转90度让它指向十二点钟方向。</p>
<p>绘制刻度要用到旋转rotate，小时刻度有12个，相邻两个刻度与圆心连线的角度就是Math.PI/6，这里用的是弧度表示，也就是30度。那么我们就用for循环来画出小时的刻度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">for (var i = 0; i &lt; 12; i++) &#123;</div><div class="line">  ctx.beginPath();</div><div class="line">  ctx.strokeStyle = &apos;#fff&apos;;</div><div class="line">  ctx.lineWidth = 3;</div><div class="line">  ctx.rotate(Math.PI / 6);</div><div class="line">  ctx.moveTo(140, 0);</div><div class="line">  ctx.lineTo(120, 0);</div><div class="line">  ctx.stroke();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同理，分钟的刻度也一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div><div class="line">for (i = 0; i &lt; 60; i++) &#123;</div><div class="line">  if (i % 5 !== 0) &#123; //去掉与小时刻度重叠的部分</div><div class="line">    ctx.beginPath();</div><div class="line">    ctx.strokeStyle = &apos;#536b7a&apos;;</div><div class="line">    ctx.lineWidth = 2;</div><div class="line">    ctx.moveTo(140, 0);</div><div class="line">    ctx.lineTo(130, 0);</div><div class="line">    ctx.stroke();</div><div class="line">  &#125;</div><div class="line">  ctx.rotate(Math.PI / 30);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>表盘大致画好了，刻度也画好了，接下来就是绘制指针并让它指向正确的时间，是不是？不就就是画一条直线么。关键是指针rotate的角度是多少呢？其实也是比较简单的。先获取当前的时间，把小时转换为12小时制的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var now = new Date(),</div><div class="line">    sec = now.getSeconds(),</div><div class="line">    min = now.getMinutes(),</div><div class="line">    hr = now.getHours();</div><div class="line">hr = hr &gt; 12 ? hr - 12 : hr;</div></pre></td></tr></table></figure></p>
<p>那么，时针的位置就是（相对于x轴正方向转过的角度）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.rotate(hr * (Math.PI / 6) + min * (Math.PI / 360) + sec * (Math.PI / 21600));</div></pre></td></tr></table></figure></p>
<p>同理，分针和秒针的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ctx.rotate(min * (Math.PI / 30) + sec * (Math.PI/1800)); //分针</div><div class="line">ctx.rotate(sec * (Math.PI /30)); //秒针</div></pre></td></tr></table></figure></p>
<p>最后，最关键的让指针转动起来，这里要用到的是requestAnimationFrame方法，用来重绘页面，得到连贯逐帧的动画，实现最佳的动画效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.requestAnimationFrame(callback);</div></pre></td></tr></table></figure></p>
<p>这个callback就是我们的绘制时钟的clock()函数。需要注意的是每次执行完requestAnimationFrame后需要清除画布，不然出现重叠交错的现象，我们把它放在clock函数开始的地方。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.clearRect(0, 0, canvas.width, canvas.height);</div></pre></td></tr></table></figure></p>
<p>码整齐的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line">(function clock() &#123;</div><div class="line">     var ctx = document.getElementById(&apos;canvas&apos;).getContext(&apos;2d&apos;);</div><div class="line">     var now = new Date(),</div><div class="line">         sec = now.getSeconds(),</div><div class="line">         min = now.getMinutes(),</div><div class="line">         hr = now.getHours();</div><div class="line">     hr = hr &gt; 12 ? hr - 12 : hr;</div><div class="line"></div><div class="line">     //绘制表盘底色</div><div class="line">     ctx.save();</div><div class="line">     ctx.clearRect(0, 0, 400, 400);</div><div class="line">     ctx.translate(200, 200);</div><div class="line">     ctx.rotate(-Math.PI/2); //将坐标轴逆时针旋转90度，x轴正方向对准12点方向</div><div class="line">     var lingrad = ctx.createLinearGradient(150, 0, -150, 0);</div><div class="line">     lingrad.addColorStop(0, &apos;#242f37&apos;);</div><div class="line">     lingrad.addColorStop(1, &apos;#48585c&apos;);</div><div class="line">     ctx.fillStyle = lingrad;</div><div class="line">     ctx.beginPath();</div><div class="line">     ctx.arc(0, 0, 150, 0, Math.PI * 2, true);</div><div class="line">     ctx.fill();</div><div class="line"></div><div class="line">     //小时刻度</div><div class="line">     ctx.save();</div><div class="line">     for (var i = 0; i &lt; 12; i++) &#123;</div><div class="line">       ctx.beginPath();</div><div class="line">       ctx.strokeStyle = &apos;#fff&apos;;</div><div class="line">       ctx.lineWidth = 3;</div><div class="line">       ctx.rotate(Math.PI / 6);</div><div class="line">       ctx.moveTo(140, 0);</div><div class="line">       ctx.lineTo(120, 0);</div><div class="line">       ctx.stroke();</div><div class="line">     &#125;</div><div class="line">     ctx.restore();</div><div class="line"></div><div class="line">     //分钟刻度</div><div class="line">     ctx.save();</div><div class="line">     ctx.beginPath();</div><div class="line">     for (i = 0; i &lt; 60; i++) &#123;</div><div class="line">       if (i % 5 !== 0) &#123;</div><div class="line">         ctx.beginPath();</div><div class="line">         ctx.strokeStyle = &apos;#536b7a&apos;;</div><div class="line">         ctx.lineWidth = 2;</div><div class="line">         ctx.moveTo(140, 0);</div><div class="line">         ctx.lineTo(130, 0);</div><div class="line">         ctx.stroke();</div><div class="line">       &#125;</div><div class="line">       ctx.rotate(Math.PI / 30);</div><div class="line">     &#125;</div><div class="line">     ctx.restore();</div><div class="line"></div><div class="line">     //时间文字</div><div class="line">     ctx.save();</div><div class="line">     ctx.rotate(Math.PI/2);</div><div class="line">     ctx.beginPath();</div><div class="line">     ctx.fillStyle = &apos;#58717e&apos;;</div><div class="line">     ctx.font = &apos;32px Microsoft yahei&apos;;</div><div class="line">     ctx.textAlign = &apos;center&apos;;</div><div class="line">     ctx.textBaseline = &apos;middle&apos;;</div><div class="line">     ctx.fillText(&apos;3&apos;, 100, 0);</div><div class="line">     ctx.fillText(&apos;6&apos;, 0, 100);</div><div class="line">     ctx.fillText(&apos;9&apos;, -100, 0);</div><div class="line">     ctx.fillText(&apos;12&apos;, 0, -100);</div><div class="line">     ctx.restore();</div><div class="line"></div><div class="line">     //时针</div><div class="line">     ctx.save();</div><div class="line">     ctx.rotate(hr * (Math.PI / 6) + min * (Math.PI / 360) + sec * (Math.PI / 21600));</div><div class="line">     ctx.lineWidth = 10;</div><div class="line">     ctx.strokeStyle = &apos;#fff&apos;;</div><div class="line">     ctx.beginPath();</div><div class="line">     ctx.moveTo(0, 0);</div><div class="line">     ctx.lineTo(110, 0);</div><div class="line">     ctx.stroke();</div><div class="line">     ctx.fillStyle = &apos;#34434c&apos;;</div><div class="line">     ctx.arc(102, 0, 3, 0, Math.PI * 2, true);</div><div class="line">     ctx.fill();</div><div class="line">     ctx.restore();</div><div class="line"></div><div class="line">     //分针</div><div class="line">     ctx.save();</div><div class="line">     ctx.rotate(min * (Math.PI / 30) + sec * (Math.PI/1800));</div><div class="line">     ctx.lineWidth = 6;</div><div class="line">     ctx.strokeStyle = &apos;#fff&apos;;</div><div class="line">     ctx.beginPath();</div><div class="line">     ctx.moveTo(0, 0);</div><div class="line">     ctx.lineTo(135, 0);</div><div class="line">     ctx.stroke();</div><div class="line"></div><div class="line">     ctx.lineWidth = 3;</div><div class="line">     ctx.strokeStyle = &apos;#34434c&apos;;</div><div class="line">     ctx.beginPath();</div><div class="line">     ctx.moveTo(130, 0);</div><div class="line">     ctx.lineTo(115, 0);</div><div class="line">     ctx.stroke();</div><div class="line">     ctx.restore();</div><div class="line"></div><div class="line">     //秒针</div><div class="line">     ctx.save();</div><div class="line">     ctx.rotate(sec * (Math.PI /30));</div><div class="line">     ctx.beginPath();</div><div class="line">     ctx.lineWidth = 4;</div><div class="line">     ctx.strokeStyle = &apos;#fff&apos;;</div><div class="line">     ctx.moveTo(0, 0);</div><div class="line">     ctx.lineTo(141, 0);</div><div class="line">     ctx.stroke();</div><div class="line"></div><div class="line">     ctx.beginPath();</div><div class="line">     ctx.lineWidth = 12;</div><div class="line">     ctx.strokeStyle = &apos;#fff&apos;;</div><div class="line">     ctx.moveTo(0, 0);</div><div class="line">     ctx.lineTo(-38, 0);</div><div class="line">     ctx.stroke();</div><div class="line"></div><div class="line">     ctx.beginPath();</div><div class="line">     ctx.fillStyle = &apos;#fff&apos;;</div><div class="line">     ctx.arc(0, 0, 15, 0, Math.PI * 2, true);</div><div class="line">     ctx.fill();</div><div class="line"></div><div class="line">     ctx.beginPath();</div><div class="line">     ctx.strokeStyle = &apos;#cdd2d5&apos;;</div><div class="line">     ctx.lineWidth = 1;</div><div class="line">     ctx.arc(0, 0, 8, 0, Math.PI * 2, true);</div><div class="line">     ctx.stroke();</div><div class="line">     ctx.restore();</div><div class="line"></div><div class="line">     //边框</div><div class="line">     ctx.beginPath();</div><div class="line">     ctx.lineWidth = 7;</div><div class="line">     var lingrad2 = ctx.createLinearGradient(150, 0, -150, 0);</div><div class="line">     lingrad2.addColorStop(0, &apos;#adb9c5&apos;);</div><div class="line">     lingrad2.addColorStop(1, &apos;#e9eced&apos;);</div><div class="line">     ctx.strokeStyle = lingrad2;</div><div class="line">     ctx.arc(0,0,152,0,Math.PI*2,true);</div><div class="line">     ctx.stroke();</div><div class="line">     ctx.restore();</div><div class="line"></div><div class="line">     window.requestAnimationFrame(clock);</div><div class="line">   &#125;)();</div></pre></td></tr></table></figure></p>
<p>转载-&gt;<a href="https://segmentfault.com/a/1190000007405217" target="_blank" rel="external">https://segmentfault.com/a/1190000007405217</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始用canvas实现这个逼格满满的时钟吧。在html代码中插入canvas标签&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript奇技淫巧44招</title>
    <link href="http://yoursite.com/2016/10/10/javascript/"/>
    <id>http://yoursite.com/2016/10/10/javascript/</id>
    <published>2016-10-10T03:21:09.000Z</published>
    <updated>2016-11-21T01:34:28.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>JavaScript是一个绝冠全球的编程语言，可用于Web开发、移动应用开发（PhoneGap、Appcelerator）、服务器端开发（Node.js和Wakanda）等等。JavaScript还是很多新手踏入编程世界的第一个语言。既可以用来显示浏览器中的简单提示框，也可以通过nodebot或nodruino来控制机器人。能够编写结构清晰、性能高效的JavaScript代码的开发人员，现如今已成了招聘市场最受追捧的人</p><br>1、首次为变量赋值时务必使用var关键字<p></p>
<pre><code>变量没有声明而直接赋值得话，默认会作为一个新的全局变量，要尽量避免使用全局变量。
</code></pre><p>2、使用===取代==</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">==和!=操作符会在需要的情况下自动转换数据类型。但===和!==不会，它们会同时比较值和数据类型，这也使得它们要比==和!=快。</div><div class="line">[10] === 10    // is false</div><div class="line">[10]  == 10    // is true</div><div class="line">&apos;10&apos; == 10     // is true</div><div class="line">&apos;10&apos; === 10    // is false</div><div class="line"> []   == 0     // is true</div><div class="line"> [] ===  0     // is false</div><div class="line"> &apos;&apos; == false   // is true but true == &quot;a&quot; is false</div><div class="line"> &apos;&apos; === false  // is false</div></pre></td></tr></table></figure>
<p>3、underfined、null、0、false、NaN、空字符串的逻辑结果均为false</p>
<p>4、行尾使用分号</p>
<pre><code>实践中最好还是使用分号，忘了写也没事，大部分情况下JavaScript解释器都会自动添加。对于为何要使用分号，可参考文章JavaScript中关于分号的真相（https://davidwalsh.name/javascript-semicolons）。
</code></pre><p>5、使用对象构造器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function Person(firstName, lastName)&#123;</div><div class="line">    this.firstName =  firstName;</div><div class="line">    this.lastName = lastName;</div><div class="line">&#125;</div><div class="line">var Saad = new Person(&quot;Saad&quot;, &quot;Mousliki&quot;);</div></pre></td></tr></table></figure>
<p>6、小心使用typeof、instanceof和contructor</p>
<pre><code>typeof：JavaScript一元操作符，用于以字符串的形式返回变量的原始类型，注意，typeof null也会返回object，大多数的对象类型（数组Array、时间Date等）也会返回object

contructor：内部原型属性，可以通过代码重写

instanceof：JavaScript操作符，会在原型链中的构造器中搜索，找到则返回true，否则返回false
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];</div><div class="line">typeof arr;   // 返回 &quot;object&quot; </div><div class="line">arr instanceof Array // true</div><div class="line">arr.constructor();  //[]</div></pre></td></tr></table></figure>
<p>7、使用自调用函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">函数在创建之后直接自动执行，通常称之为自调用匿名函数（Self-Invoked Anonymous Function）或直接调用函数表达式（Immediately Invoked Function Expression ）。格式如下：</div><div class="line"> </div><div class="line"></div><div class="line">(function()&#123;</div><div class="line">    // 置于此处的代码将自动执行</div><div class="line">&#125;)();  </div><div class="line">(function(a,b)&#123;</div><div class="line">    var result = a+b;</div><div class="line">    return result;</div><div class="line">&#125;)(10,20)</div></pre></td></tr></table></figure>
<p>8、从数组中随机获取成员</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var items = [12, 548 , &apos;a&apos; , 2 , 5478 , &apos;foo&apos; , 8852, , &apos;Doe&apos; , 2145 , 119];</div><div class="line">var  randomItem = items[Math.floor(Math.random() * items.length)];</div></pre></td></tr></table></figure>
<p>9、获取指定范围内的随机数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">var x = Math.floor(Math.random() * (max - min + 1)) + min;</div></pre></td></tr></table></figure>
<p>10、生成从0到指定值的数字数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var numbersArray = [] , max = 100;</div><div class="line">for( var i=1; numbersArray.push(i++) &lt; max;);  // numbers = [1,2,3 ... 100]</div></pre></td></tr></table></figure>
<p>11、生成随机的字母数字字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function generateRandomAlphaNum(len) &#123;</div><div class="line">    var rdmString = &quot;&quot;;</div><div class="line">    for( ; rdmString.length &lt; len; rdmString  += Math.random().toString(36).substr(2));</div><div class="line">    return  rdmString.substr(0, len);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>12、打乱数字数组的顺序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var numbers = [5, 458 , 120 , -215 , 228 , 400 , 122205, -85411];</div><div class="line">numbers = numbers.sort(function()&#123; return Math.random() - 0.5&#125;);</div><div class="line">/* numbers 数组将类似于 [120, 5, 228, -215, 400, 458, -85411, 122205]  */</div><div class="line">这里使用了JavaScript内置的数组排序函数，更好的办法是用专门的代码来实现（如Fisher-Yates算法），可以参见StackOverFlow上的这个讨论。</div></pre></td></tr></table></figure>
<p>13、字符串去空格</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String.prototype.trim = function()&#123;return this.replace(/^\s+|\s+$/g, &quot;&quot;);&#125;;</div><div class="line">新的JavaScript引擎已经有了trim()的原生实现。</div></pre></td></tr></table></figure>
<p>14、数组之间追加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var array1 = [12 , &quot;foo&quot; , &#123;name &quot;Joe&quot;&#125; , -2458];</div><div class="line">var array2 = [&quot;Doe&quot; , 555 , 100];</div><div class="line">Array.prototype.push.apply(array1, array2);</div><div class="line">/* array1 值为  [12 , &quot;foo&quot; , &#123;name &quot;Joe&quot;&#125; , -2458 , &quot;Doe&quot; , 555 , 100] */</div></pre></td></tr></table></figure>
<p>15、对象转换为数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var argArray = Array.prototype.slice.call(arguments);</div></pre></td></tr></table></figure>
<p>16、验证是否是数字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function isNumber(n)&#123;</div><div class="line">    return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>17、验证是否是数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function isArray(obj)&#123;</div><div class="line">    return Object.prototype.toString.call(obj) === &apos;[object Array]&apos; ;</div><div class="line">&#125;</div><div class="line">但如果toString()方法被重写过得话，就行不通了。也可以使用下面的方法：</div><div class="line"> </div><div class="line"></div><div class="line">Array.isArray(obj); // its a new Array method</div><div class="line">如果在浏览器中没有使用frame，还可以用instanceof，但如果上下文太复杂，也有可能出错。</div><div class="line"> </div><div class="line"></div><div class="line">var myFrame = document.createElement(&apos;iframe&apos;);</div><div class="line">document.body.appendChild(myFrame);</div><div class="line">var myArray = window.frames[window.frames.length-1].Array;</div><div class="line">var arr = new myArray(a,b,10); // [a,b,10]  </div><div class="line">// myArray 的构造器已经丢失，instanceof 的结果将不正常</div><div class="line">// 构造器是不能跨 frame 共享的</div><div class="line">arr instanceof Array; // false</div></pre></td></tr></table></figure>
<p>18、获取数组中的最大值和最小值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var  numbers = [5, 458 , 120 , -215 , 228 , 400 , 122205, -85411]; </div><div class="line">var maxInNumbers = Math.max.apply(Math, numbers); </div><div class="line">var minInNumbers = Math.min.apply(Math, numbers);</div></pre></td></tr></table></figure>
<p>19、清空数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var myArray = [12 , 222 , 1000 ];  </div><div class="line">myArray.length = 0; // myArray will be equal to [].</div></pre></td></tr></table></figure>
<p>20、不要直接从数组中delete或remove元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">切忌：</div><div class="line"> </div><div class="line"></div><div class="line">var items = [12, 548 ,&apos;a&apos; , 2 , 5478 , &apos;foo&apos; , 8852, , &apos;Doe&apos; ,2154 , 119 ]; </div><div class="line">items.length; // return 11 </div><div class="line">delete items[3]; // return true </div><div class="line">items.length; // return 11 </div><div class="line">/* items 结果为 [12, 548, &quot;a&quot;, undefined × 1, 5478, &quot;foo&quot;, 8852, undefined × 1, &quot;Doe&quot;, 2154, 119] */</div><div class="line">而应：</div><div class="line"> </div><div class="line"></div><div class="line">var items = [12, 548 ,&apos;a&apos; , 2 , 5478 , &apos;foo&apos; , 8852, , &apos;Doe&apos; ,2154 , 119 ]; </div><div class="line">items.length; // return 11 </div><div class="line">items.splice(3,1) ; </div><div class="line">items.length; // return 10 </div><div class="line">/* items 结果为 [12, 548, &quot;a&quot;, 5478, &quot;foo&quot;, 8852, undefined × 1, &quot;Doe&quot;, 2154, 119]</div><div class="line">删除对象的属性时可以使用delete。</div></pre></td></tr></table></figure>
<p>21、使用length属性截断数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">var myArray = [12 , 222 , 1000 , 124 , 98 , 10 ];  </div><div class="line">myArray.length = 4; // myArray will be equal to [12 , 222 , 1000 , 124].</div><div class="line">与此同时，如果把length属性变大，数组的长度值变会增加，会使用undefined来作为新的元素填充。length是一个可写的属性。</div><div class="line"> </div><div class="line"></div><div class="line">myArray.length = 10; // the new array length is 10 </div><div class="line">myArray[myArray.length - 1] ; // undefined</div></pre></td></tr></table></figure>
<p>22、在条件中使用逻辑与或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var foo = 10;  </div><div class="line">foo == 10 &amp;&amp; doSomething(); // is the same thing as if (foo == 10) doSomething(); </div><div class="line">foo == 5 || doSomething(); // is the same thing as if (foo != 5) doSomething();</div><div class="line">逻辑或还可用来设置默认值，比如函数参数的默认值。</div><div class="line"> </div><div class="line"></div><div class="line">function doSomething(arg1)&#123; </div><div class="line">    arg1 = arg1 || 10; // arg1 will have 10 as a default value if it’s not already set</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>23、使得map()函数方法对数据循环</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var squares = [1,2,3,4].map(function (val) &#123;  </div><div class="line">    return val * val;  </div><div class="line">&#125;); </div><div class="line">// squares will be equal to [1, 4, 9, 16]</div></pre></td></tr></table></figure>
<p>24、保留指定小数位数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var num =2.443242342;</div><div class="line">num = num.toFixed(4);  // num will be equal to 2.4432</div><div class="line">注意，toFixec()返回的是字符串，不是数字。</div></pre></td></tr></table></figure>
<p>25、浮点计算的问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0.1 + 0.2 === 0.3 // is false </div><div class="line">9007199254740992 + 1 // is equal to 9007199254740992</div><div class="line">9007199254740992 + 2 // is equal to 9007199254740994</div><div class="line">为什么呢？因为0.1+0.2等于0.30000000000000004。JavaScript的数字都遵循IEEE 754标准构建，在内部都是64位浮点小数表示，具体可以参见JavaScript中的数字是如何编码的.</div><div class="line">可以通过使用toFixed()和toPrecision()来解决这个问题。</div></pre></td></tr></table></figure>
<p>26、通过for-in循环检查对象的属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for (var name in object) &#123;  </div><div class="line">    if (object.hasOwnProperty(name)) &#123; </div><div class="line">        // do something with name</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>27、逗号操作符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = 0; </div><div class="line">var b = ( a++, 99 ); </div><div class="line">console.log(a);  // a will be equal to 1 </div><div class="line">console.log(b);  // b is equal to 99</div></pre></td></tr></table></figure>
<p>28、临时存储用于计算和查询的变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var navright = document.querySelector(&apos;#right&apos;); </div><div class="line">var navleft = document.querySelector(&apos;#left&apos;); </div><div class="line">var navup = document.querySelector(&apos;#up&apos;); </div><div class="line">var navdown = document.querySelector(&apos;#down&apos;);</div></pre></td></tr></table></figure>
<p>29、提前检查传入isFinite()的参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">isFinite(0/0) ; // false</div><div class="line">isFinite(&quot;foo&quot;); // false</div><div class="line">isFinite(&quot;10&quot;); // true</div><div class="line">isFinite(10);   // true</div><div class="line">isFinite(undefined);  // false</div><div class="line">isFinite();   // false</div><div class="line">isFinite(null);  // true，这点当特别注意</div></pre></td></tr></table></figure>
<p>30、避免在数组中使用负数做索引</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var numbersArray = [1,2,3,4,5];</div><div class="line">var from = numbersArray.indexOf(&quot;foo&quot;) ;  // from is equal to -1</div><div class="line">numbersArray.splice(from,2);    // will return [5]</div><div class="line">注意传给splice的索引参数不要是负数，当是负数时，会从数组结尾处删除元素。</div></pre></td></tr></table></figure>
<p>31、用JSON来序列化与反序列化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var person = &#123;name :&apos;Saad&apos;, age : 26, department : &#123;ID : 15, name : &quot;R&amp;D&quot;&#125; &#125;;</div><div class="line">var stringFromPerson = JSON.stringify(person);</div><div class="line">/* stringFromPerson 结果为 &quot;&#123;&quot;name&quot;:&quot;Saad&quot;,&quot;age&quot;:26,&quot;department&quot;:&#123;&quot;ID&quot;:15,&quot;name&quot;:&quot;R&amp;D&quot;&#125;&#125;&quot;   */</div><div class="line">var personFromString = JSON.parse(stringFromPerson);</div><div class="line">/* personFromString 的值与 person 对象相同  */</div></pre></td></tr></table></figure>
<p>32、不要使用eval()或者函数构造器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">eval()和函数构造器（Function consturctor）的开销较大，每次调用，JavaScript引擎都要将源代码转换为可执行的代码。</div><div class="line"> </div><div class="line"></div><div class="line">var func1 = new Function(functionCode);</div><div class="line">var func2 = eval(functionCode);</div></pre></td></tr></table></figure>
<p>33、避免使用with()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">34、不要对数组使用for-in</div><div class="line"></div><div class="line">```避免：</div><div class="line"> </div><div class="line"></div><div class="line">var sum = 0;  </div><div class="line">for (var i in arrayNumbers) &#123;  </div><div class="line">    sum += arrayNumbers[i];  </div><div class="line">&#125;</div><div class="line">而是：</div><div class="line"> </div><div class="line"></div><div class="line">var sum = 0;  </div><div class="line">for (var i = 0, len = arrayNumbers.length; i &lt; len; i++) &#123;  </div><div class="line">    sum += arrayNumbers[i];  </div><div class="line">&#125;</div><div class="line">另外一个好处是，i和len两个变量是在for循环的第一个声明中，二者只会初始化一次，这要比下面这种写法快：</div><div class="line"> </div><div class="line"></div><div class="line">for (var i = 0; i &lt; arrayNumbers.length; i++)</div></pre></td></tr></table></figure>
<p>35、传给setInterval()和setTimeout()时使用函数而不是字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"></div><div class="line">setInterval(&apos;doSomethingPeriodically()&apos;, 1000);  </div><div class="line">setTimeout(&apos;doSomethingAfterFiveSeconds()&apos;, 5000);</div><div class="line">而是用：</div><div class="line"> </div><div class="line"></div><div class="line">setInterval(doSomethingPeriodically, 1000);  </div><div class="line">setTimeout(doSomethingAfterFiveSeconds, 5000);</div></pre></td></tr></table></figure>
<p>36、使用switch/case代替一大叠的if/else</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">37、在switch/case中使用数字区间</div><div class="line"></div><div class="line">```其实，switch/case中的case条件，还可以这样写：</div><div class="line"> </div><div class="line"></div><div class="line">function getCategory(age) &#123;  </div><div class="line">    var category = &quot;&quot;;  </div><div class="line">    switch (true) &#123;  </div><div class="line">        case isNaN(age):  </div><div class="line">            category = &quot;not an age&quot;;  </div><div class="line">            break;  </div><div class="line">        case (age &gt;= 50):  </div><div class="line">            category = &quot;Old&quot;;  </div><div class="line">            break;  </div><div class="line">        case (age &lt;= 20):  </div><div class="line">            category = &quot;Baby&quot;;  </div><div class="line">            break;  </div><div class="line">        default:  </div><div class="line">            category = &quot;Young&quot;;  </div><div class="line">            break;  </div><div class="line">    &#125;;  </div><div class="line">    return category;  </div><div class="line">&#125;  </div><div class="line">getCategory(5);  // 将返回 &quot;Baby&quot;</div></pre></td></tr></table></figure>
<p>38、使用对象作为对象的原型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"></div><div class="line">function clone(object) &#123;  </div><div class="line">    function OneShotConstructor()&#123;&#125;; </div><div class="line">    OneShotConstructor.prototype = object;  </div><div class="line">    return new OneShotConstructor(); </div><div class="line">&#125; </div><div class="line">clone(Array).prototype ;  // []</div></pre></td></tr></table></figure>
<p>39、HTML字段转换函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function escapeHTML(text) &#123;  </div><div class="line">    var replacements= &#123;&quot;&lt;&quot;: &quot;&amp;lt;&quot;, &quot;&gt;&quot;: &quot;&amp;gt;&quot;,&quot;&amp;&quot;: &quot;&amp;amp;&quot;, &quot;\&quot;&quot;: &quot;&amp;quot;&quot;&#125;;                      </div><div class="line">    return text.replace(/[&lt;&gt;&amp;&quot;]/g, function(character) &#123;  </div><div class="line">        return replacements[character];  </div><div class="line">    &#125;); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>40、不要在循环内部使用try-catch-finally</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">切忌：</div><div class="line"> </div><div class="line">var object = [&apos;foo&apos;, &apos;bar&apos;], i;  </div><div class="line">for (i = 0, len = object.length; i &lt;len; i++) &#123;  </div><div class="line">    try &#123;  </div><div class="line">        // do something that throws an exception </div><div class="line">    &#125;  </div><div class="line">    catch (e) &#123;   </div><div class="line">        // handle exception  </div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line">而应该：</div><div class="line"> </div><div class="line">var object = [&apos;foo&apos;, &apos;bar&apos;], i;  </div><div class="line">try &#123; </div><div class="line">    for (i = 0, len = object.length; i &lt;len; i++) &#123;  </div><div class="line">        // do something that throws an exception </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line">catch (e) &#123;   </div><div class="line">    // handle exception  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>41、使用XMLHttpRequests时注意设置超时</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">var xhr = new XMLHttpRequest (); </div><div class="line">xhr.onreadystatechange = function () &#123;  </div><div class="line">    if (this.readyState == 4) &#123;  </div><div class="line">        clearTimeout(timeout);  </div><div class="line">        // do something with response data </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">var timeout = setTimeout( function () &#123;  </div><div class="line">    xhr.abort(); // call error callback  </div><div class="line">&#125;, 60*1000 /* timeout after a minute */ ); </div><div class="line">xhr.open(&apos;GET&apos;, url, true);  </div><div class="line">xhr.send();</div><div class="line">同时需要注意的是，不要同时发起多个XMLHttpRequests请求。</div></pre></td></tr></table></figure>
<p>42、处理WebSocket的超时</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">为了防止这种情况的发生，可以每隔一定时间，往服务器发送一条空的消息。可以通过下面这两个函数来实现这个需求，一个用于使连接保持活动状态，另一个专门用于结束这个状态。</div><div class="line"> </div><div class="line"></div><div class="line">var timerID = 0; </div><div class="line">function keepAlive() &#123; </div><div class="line">    var timeout = 15000;  </div><div class="line">    if (webSocket.readyState == webSocket.OPEN) &#123;  </div><div class="line">        webSocket.send(&apos;&apos;);  </div><div class="line">    &#125;  </div><div class="line">    timerId = setTimeout(keepAlive, timeout);  </div><div class="line">&#125;  </div><div class="line">function cancelKeepAlive() &#123;  </div><div class="line">    if (timerId) &#123;  </div><div class="line">        cancelTimeout(timerId);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line">keepAlive()函数可以放在WebSocket连接的onOpen()方法的最后面，cancelKeepAlive()放在onClose()方法的最末尾。</div></pre></td></tr></table></figure>
<p>43、时间注意原始操作符比函数调用快，使用VanillaJS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var min = Math.min(a,b); </div><div class="line">A.push(v);</div><div class="line">可以这样来代替：</div><div class="line"> </div><div class="line"></div><div class="line">var min = a &lt; b ? a : b; </div><div class="line">A[A.length] = v;</div></pre></td></tr></table></figure>
<p>44、开发时注意代码结构，上线前检查并压缩JavaScript代码</p>
<p><code>可以使用JSLint或JSMin等工具来检查并压缩代码。</code></p>
<p>转载<a href="http://www.cnblogs.com/libin-1/p/5999197.html" target="_blank" rel="external">http://www.cnblogs.com/libin-1/p/5999197.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;JavaScript是一个绝冠全球的编程语言，可用于Web开发、移动应用开发（PhoneGap、Appcelerator）、服务器端开发（Node.js和Wakanda）等等。JavaScript还是很多新手踏入编程世界的第一个语言。既可以用来显示浏览器中的简
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>canvas绘制七巧板</title>
    <link href="http://yoursite.com/2016/10/06/qiqiaoban/"/>
    <id>http://yoursite.com/2016/10/06/qiqiaoban/</id>
    <published>2016-10-06T11:08:15.000Z</published>
    <updated>2016-11-21T01:33:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">	&lt;title&gt;&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;canvas width=&quot;800&quot; height=&quot;800&quot; id=&quot;canvas&quot; style=&quot;display:block;border:1px solid #000;&quot;&gt;</div><div class="line">		不支持</div><div class="line">	&lt;/canvas&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">var canvas = document.querySelector(&quot;#canvas&quot;);</div><div class="line">var context = canvas.getContext(&apos;2d&apos;);</div><div class="line">var xian =[</div><div class="line">		&#123;a:[&#123;x:0,y:0&#125;,&#123;x:400,y:400&#125;,&#123;x:0,y:800&#125;],color:&quot;red&quot;&#125;,</div><div class="line">		&#123;a:[&#123;x:0,y:0&#125;,&#123;x:400,y:400&#125;,&#123;x:800,y:0&#125;],color:&quot;green&quot;&#125;,</div><div class="line">		&#123;a:[&#123;x:800,y:0&#125;,&#123;x:800,y:400&#125;,&#123;x:600,y:600&#125;,&#123;x:600,y:200&#125;],color:&quot;#ef3d61&quot;&#125;,</div><div class="line">    	&#123;a:[&#123;x:600,y:200&#125;,&#123;x:600,y:600&#125;,&#123;x:400,y:400&#125;],color:&quot;#f9f51a&quot;&#125;,</div><div class="line">    	&#123;a:[&#123;x:400,y:400&#125;,&#123;x:600,y:600&#125;,&#123;x:400,y:800&#125;,&#123;x:200,y:600&#125;],color:&quot;#a54c09&quot;&#125;,</div><div class="line">   		&#123;a:[&#123;x:200,y:600&#125;,&#123;x:400,y:800&#125;,&#123;x:0,y:800&#125;],color:&quot;#fa8ccc&quot;&#125;,</div><div class="line">    	&#123;a:[&#123;x:800,y:400&#125;,&#123;x:800,y:800&#125;,&#123;x:400,y:800&#125;],color:&quot;#f6ca29&quot;&#125;</div><div class="line">	];</div><div class="line"></div><div class="line">	//第一种方法</div><div class="line">// for(var i = 0;i&lt;xian.length;i++)&#123;</div><div class="line">// 	context.beginPath();</div><div class="line">// 	context.moveTo(xian[i].a[0].x,xian[i].a[0].y);</div><div class="line">// 	for (var j = 0; j &lt; xian[i].a.length; j++) &#123;</div><div class="line">// 		context.lineTo(xian[i].a[j].x,xian[i].a[j].y);</div><div class="line">// 	&#125;</div><div class="line">// 	context.closePath();</div><div class="line">// 	context.fillStyle = xian[i].color;</div><div class="line">// 	context.stroke();</div><div class="line">// 	context.fill();</div><div class="line">// &#125;</div><div class="line"></div><div class="line"></div><div class="line">//第二种方法</div><div class="line">for (var i = 0; i &lt; xian.length; i++) &#123;</div><div class="line">       dian(xian[i]);</div><div class="line">   &#125;;</div><div class="line"></div><div class="line">function dian (item) &#123;</div><div class="line">       context.beginPath(); </div><div class="line">       context.moveTo(item.a[0].x,item.a[0].y);</div><div class="line">     	for (var i = 1; i &lt; item.a.length; i++) &#123;</div><div class="line">           context.lineTo(item.a[i].x,item.a[i].y); </div><div class="line">       &#125;;</div><div class="line">         </div><div class="line">       context.fillStyle = item.color;</div><div class="line">       context.closePath();</div><div class="line">       context.stroke();</div><div class="line">       context.fill(); </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>canvas基础使用</title>
    <link href="http://yoursite.com/2016/10/03/canvas/"/>
    <id>http://yoursite.com/2016/10/03/canvas/</id>
    <published>2016-10-03T09:26:50.000Z</published>
    <updated>2016-11-21T01:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">	&lt;title&gt;&lt;/title&gt;</div><div class="line">	&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">		#canvas&#123;</div><div class="line">			display: block;</div><div class="line">			margin: 0 auto;</div><div class="line">			box-shadow: 3px 3px 3px ;</div><div class="line">		&#125;</div><div class="line">		#can&#123;</div><div class="line">			display: block;</div><div class="line">			border:1px #000 solid;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;canvas id=&quot;canvas&quot;&gt;</div><div class="line">		你的浏览器不支持canvas</div><div class="line">	&lt;/canvas&gt;	</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">	// 1.获取canvas元素</div><div class="line">	var canvas = document.querySelector(&quot;#canvas&quot;);</div><div class="line">	canvas.width=400;</div><div class="line">	canvas.height=400;</div><div class="line"></div><div class="line">	// 2.定义画图环境</div><div class="line">	var context = canvas.getContext(&quot;2d&quot;);</div><div class="line"></div><div class="line">	// 3.画线条</div><div class="line">	// moveTo(x,y) 定义线条的起点位置</div><div class="line">	// lineTo(x,y) 定义线条的终点位置</div><div class="line">	context.beginPath();</div><div class="line">	context.moveTo(100,100);</div><div class="line">	context.lineTo(300,300);</div><div class="line">	context.lineTo(100,300);</div><div class="line">	context.lineTo(100,100);</div><div class="line">	// stroke() 开始绘画</div><div class="line">	context.stroke();</div><div class="line">	// lineWidth 线条宽度</div><div class="line">	// strokeStyle 线条的样式</div><div class="line">	// fillStyle  填充</div><div class="line">	// beginPath  开始一个新的路径</div><div class="line">	// closePath  关闭这个路径</div><div class="line">	context.fillStyle = &quot;red&quot;;</div><div class="line">	context.fill();</div><div class="line">	context.closePath();</div><div class="line">	</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>this对象</title>
    <link href="http://yoursite.com/2016/09/29/this/"/>
    <id>http://yoursite.com/2016/09/29/this/</id>
    <published>2016-09-29T06:06:38.000Z</published>
    <updated>2016-11-21T01:32:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.纯粹的函数调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">      	this.x = 1;</div><div class="line">       alert(this.x);</div><div class="line">   &#125;</div><div class="line">   test();//1</div></pre></td></tr></table></figure>
<p>2.函数作为某个对象的方法进行调用，这是this就指向这个上级的对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function test()</div><div class="line">   &#123;</div><div class="line">       alert(this.x);</div><div class="line">   &#125;</div><div class="line">   var o = &#123;&#125;;</div><div class="line">   o.x = 1;</div><div class="line">   o.m = test;</div><div class="line">   o.m();//1</div></pre></td></tr></table></figure>
<p>3.作为构造函数进行调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">       this.x = 1;</div><div class="line">   &#125;</div><div class="line">   var test1 = new test();</div><div class="line">   alert(test1.x);//1</div></pre></td></tr></table></figure>
<p>为了证明此时this不是指向全局变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x = 2;</div><div class="line">   function test()&#123;</div><div class="line">    this.x = 1;</div><div class="line">   &#125;</div><div class="line">   var o = new test();</div><div class="line">   alert(x);//2</div></pre></td></tr></table></figure>
<p>4.apply调用apply方法中第一个参数就是this指向的对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var x = 2;</div><div class="line">   function test()&#123;</div><div class="line">       alert(this.x);</div><div class="line">   &#125;</div><div class="line">   var o = &#123;&#125;;</div><div class="line">   o.x = 1;</div><div class="line">   o.m = test;</div><div class="line">   o.m.apply(o);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.纯粹的函数调用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS设置CSS样式的几种方式</title>
    <link href="http://yoursite.com/2016/09/22/jcstyle/"/>
    <id>http://yoursite.com/2016/09/22/jcstyle/</id>
    <published>2016-09-22T11:21:21.000Z</published>
    <updated>2016-11-21T01:31:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>用JS来动态设置CSS样式，常见的有以下几种</p><br>1. 直接设置style的属性  某些情况用这个设置 !important值无效<br><br><p>如果属性有’-‘号，就写成驼峰的形式（如textAlign）  如果想保留 - 号，就中括号的形式</p>  <figure class="highlight plain"><figcaption><span>= '100px';</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.style.height = &apos;100px&apos;;</div></pre></td></tr></table></figure><br><br>2. 直接设置属性（只能用于某些属性，相关样式会自动识别）<br><br><figure class="highlight plain"><figcaption><span>100);</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.setAttribute(&apos;height&apos;, &apos;100px&apos;);</div></pre></td></tr></table></figure><br><br>3. 设置style的属性<br><br><figure class="highlight plain"><figcaption><span>'height: 100px !important');```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">4. 使用setProperty  如果要设置!important，推荐用这种方法设置第三个参数</div><div class="line"></div><div class="line">```element.style.setProperty(&apos;height&apos;, &apos;300px&apos;, &apos;important&apos;);</div></pre></td></tr></table></figure><br><br>5. 改变class   比如JQ的更改class相关方法<br><br><p>因JS获取不到css的伪元素，所以可以通过改变伪元素父级的class来动态更改伪元素的样式</p>

<figure class="highlight plain"><figcaption><span>= 'blue';</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.className += &apos;blue fb&apos;;</div></pre></td></tr></table></figure>
<ol>
<li>设置cssText</li>
</ol>
<figure class="highlight plain"><figcaption><span>= 'height: 100px !important';</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.style.cssText += &apos;height: 100px !important&apos;;</div></pre></td></tr></table></figure>
<ol>
<li>创建引入新的css样式文件</li>
</ol>
<pre><code><figure class="highlight plain"><figcaption><span>addNewStyle(newStyle) &#123;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    var styleElement = document.getElementById(&apos;styles_js&apos;);</div><div class="line"></div><div class="line">    if (!styleElement) &#123;</div><div class="line">        styleElement = document.createElement(&apos;style&apos;);</div><div class="line">        styleElement.type = &apos;text/css&apos;;</div><div class="line">        styleElement.id = &apos;styles_js&apos;;</div><div class="line">        document.getElementsByTagName(&apos;head&apos;)[0].appendChild(styleElement);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    styleElement.appendChild(document.createTextNode(newStyle));</div><div class="line">&#125;</div><div class="line"></div><div class="line">addNewStyle(&apos;.box &#123;height: 100px !important;&#125;&apos;);</div></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>使用addRule、insertRule</p>
 <figure class="highlight plain"><figcaption><span>在原有样式操作</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">document.styleSheets[0].addRule(&apos;.box&apos;, &apos;height: 100px&apos;);</div><div class="line">document.styleSheets[0].insertRule(&apos;.box &#123;height: 100px&#125;&apos;, 0);</div><div class="line"></div><div class="line">// 或者插入新样式时操作</div><div class="line">var styleEl = document.createElement(&apos;style&apos;),</div><div class="line">    styleSheet = styleEl.sheet;</div><div class="line"></div><div class="line">styleSheet.addRule(&apos;.box&apos;, &apos;height: 100px&apos;);</div><div class="line">styleSheet.insertRule(&apos;.box &#123;height: 100px&#125;&apos;, 0);</div><div class="line"></div><div class="line">document.head.appendChild(styleEl);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>转载-&gt;<a href="http://www.cnblogs.com/imwtr/p/6051325.html" target="_blank" rel="external">http://www.cnblogs.com/imwtr/p/6051325.html</a>     </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用JS来动态设置CSS样式，常见的有以下几种&lt;/p&gt;&lt;br&gt;1. 直接设置style的属性  某些情况用这个设置 !important值无效&lt;br&gt;&lt;br&gt;&lt;p&gt;如果属性有’-‘号，就写成驼峰的形式（如textAlign）  如果想保留 - 号，就中括号的形式&lt;/p&gt;  &lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js数组排序与去重</title>
    <link href="http://yoursite.com/2016/09/15/shuzu/"/>
    <id>http://yoursite.com/2016/09/15/shuzu/</id>
    <published>2016-09-15T12:06:31.000Z</published>
    <updated>2016-11-21T01:31:24.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>冒泡排序：<br>从数组中随便拿一个数与后一位比较，如果前者比后者大，那么两者交换位置，从而遍历数组可以得到排序的效果</p><br><figure class="highlight plain"><figcaption><span>arr = [1, 9, 4, 50, 49, 6, 3, 2];</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">  for (var i = 0; i &lt; arr.length - 1; i++)&#123;</div><div class="line">    for (var j = i + 1; j &lt; arr.length; j++)&#123;</div><div class="line">      var tempi = arr[i]; //获取第一个值，并与后一个值比较</div><div class="line">      var tempj = arr[j];</div><div class="line">      if (tempi &gt; tempj)&#123;</div><div class="line">        arr[i] = tempj;</div><div class="line">        arr[j] = tempi;//如果前一个值比后一个值大，那么相互交换</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125; </div><div class="line">  console.log(arr); //return arr；</div><div class="line">&#125;</div><div class="line">test();//调用函数</div></pre></td></tr></table></figure><p></p>
<p></p><p>快速排序：<br>在数组中间那一个值，然后用这个值跟数组里面的值相比较，大于此值的放在一边，小于的也放在一边，然后用concat()合并，再进行比较，如此反复</p><br><figure class="highlight plain"><figcaption><span>arr = [1, 9, 4, 50, 49, 6, 3, 2];</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function test(arr)&#123;</div><div class="line">  if (arr.length &lt;= 1) return arr;//如果数组只有一位，就没有必要比较了</div><div class="line">  var index = Math.floor(arr.length / 2);//获取中间值的索引</div><div class="line">  var cur = arr.splice(index, 1);//截取中间值，如果此处使用cur=arr[index]; 那么将会出现无限递归的错误</div><div class="line">  var left = [], right = [];//小于中间值的放在left数组里，大于的放在right数组</div><div class="line">  for (var i = 0; i &lt; arr.length; i++)&#123;</div><div class="line">    if (cur &gt; arr[i])&#123;</div><div class="line">      left.push(arr[i]);</div><div class="line">    &#125; else&#123;</div><div class="line">      right.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return test(left).concat(cur, test(right));//通过递归，上一轮比较好的数组合并，并且再次进行比较</div><div class="line">&#125;</div><div class="line">test(arr);</div></pre></td></tr></table></figure><p></p>
<p></p><p>sort()方法：简单粗暴</p><br><figure class="highlight plain"><figcaption><span>arr = [1, 9, 4, 50, 49, 6, 3, 2];</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">  return arr.sort(sortNumber);</div><div class="line">&#125;</div><div class="line">function sortNumber(a, b)&#123;</div><div class="line">  return a - b;</div><div class="line">&#125;</div><div class="line">test();</div></pre></td></tr></table></figure><p></p>
<p></p><p>方法一：</p><br><figure class="highlight plain"><figcaption><span>arr = [1, 'a', 'a', 'b', 'd', 'e', 'e', 1, 0]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">  for (var i = 0; i &lt; arr.length; i++)&#123;</div><div class="line">    for(var j = i + 1; j &lt; arr.length; j++)&#123;</div><div class="line">      if(arr[i] === arr[j]) arr.splice(j,1);//如果前一个值与后一个值相等，那么就去掉后一个值，splice()可以修改原数组</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return arr;</div><div class="line">&#125;</div><div class="line">test();</div></pre></td></tr></table></figure><p></p>
<p></p><p>方法二</p><br><figure class="highlight plain"><figcaption><span>arr = [1, 1, 4, 50, 50, 6, 2, 2];</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">  return arr.filter(function(item,index,array)&#123;</div><div class="line">    return array.indexOf(item) === index; </div><div class="line">    //或者这样写return array.indexOf(item, index+1) === -1; 如果没有重复项，返回true</div><div class="line">    //用filter方法，返回ietm对应的indexOf索引值与本身index索引值相等的值，也就是去掉重复的值，filter本身不修改数组，只是会自动遍历数组，去掉重复值后，那么arr就剩下不重复的了</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">test();//输出Array [ 1, 4, 50, 6, 2 ]</div></pre></td></tr></table></figure><p></p>
<p></p><p>方法三(ES6)</p><br><figure class="highlight plain"><figcaption><span>arr = [1, 1, 4, 50, 50, 6, 2, 2];</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function unique(arr)&#123;</div><div class="line">  return Array.from(new Set(arr));</div><div class="line">&#125;</div><div class="line">unique(arr);</div></pre></td></tr></table></figure><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;冒泡排序：&lt;br&gt;从数组中随便拿一个数与后一位比较，如果前者比后者大，那么两者交换位置，从而遍历数组可以得到排序的效果&lt;/p&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;arr = [1, 9, 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css技巧</title>
    <link href="http://yoursite.com/2016/09/10/css/"/>
    <id>http://yoursite.com/2016/09/10/css/</id>
    <published>2016-09-10T11:13:57.000Z</published>
    <updated>2016-11-21T01:30:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="聊一聊这些常见而且实用的css技巧"><a href="#聊一聊这些常见而且实用的css技巧" class="headerlink" title="聊一聊这些常见而且实用的css技巧"></a>聊一聊这些常见而且实用的css技巧</h2><h1 id="1、清除浮动"><a href="#1、清除浮动" class="headerlink" title="1、清除浮动"></a>1、清除浮动</h1><figure class="highlight plain"><figcaption><span>清除浮动</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.clearfix&#123;</div><div class="line">  zoom: 1;</div><div class="line">&#125;</div><div class="line">.clearfix:after&#123;</div><div class="line">  display: block;</div><div class="line">  content: &apos;&apos;;</div><div class="line">  clear: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2、垂直水平居中"><a href="#2、垂直水平居中" class="headerlink" title="2、垂直水平居中"></a>2、垂直水平居中</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">position: absolute;</div><div class="line">top: 50%;</div><div class="line">left: 50%;</div><div class="line">margin-top: -3em;</div><div class="line">margin-left: -7em;</div><div class="line">width: 14em;</div><div class="line">height: 6em;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>＋ 未知宽高 ＋ translate</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">position: absolute;</div><div class="line">left: 50%;</div><div class="line">top: 50%;</div><div class="line">transform: translate(-50%, -50%);</div><div class="line">//需要补充浏览器前缀</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>轻松搞定水平垂直居中( 未知宽高)</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">display: flex;</div><div class="line">align-items: center;</div><div class="line">justify-content: center;</div></pre></td></tr></table></figure>
<h1 id="3、-文本末尾添加省略号"><a href="#3、-文本末尾添加省略号" class="headerlink" title="3、 文本末尾添加省略号"></a>3、 文本末尾添加省略号</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">overflow: hidden;</div><div class="line">text-overflow: ellipsis;</div><div class="line">white-space: nowrap;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">overflow: hidden;</div><div class="line">text-overflow: ellipsis;</div><div class="line">display: -webkit-box;</div><div class="line">-webkit-line-clamp: 3;</div><div class="line">-webkit-box-orient: vertical;</div></pre></td></tr></table></figure>
<h1 id="4、制造文本的模糊效果"><a href="#4、制造文本的模糊效果" class="headerlink" title="4、制造文本的模糊效果"></a>4、制造文本的模糊效果</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">color: transparent;</div><div class="line">text-shadow:0 0 2px rgba(0,0,0,.5);</div></pre></td></tr></table></figure>
<h1 id="5、动画实现简洁loading效果"><a href="#5、动画实现简洁loading效果" class="headerlink" title="5、动画实现简洁loading效果"></a>5、动画实现简洁loading效果</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.loading:after&#123;</div><div class="line">  display: inline-block;</div><div class="line">  overflow: hidden;</div><div class="line">  vertical-align: bottom;</div><div class="line">  content: &apos;\2026&apos;;</div><div class="line">  -webkit-animation: ellipsis 2s infinite;</div><div class="line">&#125;</div><div class="line">// 动画部分</div><div class="line">@-webkit-keyframes ellipsis&#123;</div><div class="line">  from&#123;</div><div class="line">    width: 2px;</div><div class="line">  &#125;</div><div class="line">  to&#123;</div><div class="line">    width: 15px;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="6、自定义文本选中样式"><a href="#6、自定义文本选中样式" class="headerlink" title="6、自定义文本选中样式"></a>6、自定义文本选中样式</h1><figure class="highlight plain"><figcaption><span>注意只能修改这两个属性 字体颜色 选中背景颜色</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">element::selection&#123;</div><div class="line">  color: green;</div><div class="line">  background-color: pink;</div><div class="line">&#125;</div><div class="line">element::-moz-selection&#123;</div><div class="line">  color: green;</div><div class="line">  background-color: pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;聊一聊这些常见而且实用的css技巧&quot;&gt;&lt;a href=&quot;#聊一聊这些常见而且实用的css技巧&quot; class=&quot;headerlink&quot; title=&quot;聊一聊这些常见而且实用的css技巧&quot;&gt;&lt;/a&gt;聊一聊这些常见而且实用的css技巧&lt;/h2&gt;&lt;h1 id=&quot;1、清除浮
    
    </summary>
    
    
  </entry>
  
</feed>
